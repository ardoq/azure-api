{:scheme "https", :host "management.azure.com", :info {:description "Media Services resource management APIs.", :title "MediaServicesManagementClient", :version "2015-10-01"}, :ops {:MediaService_Delete {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}", :description "Deletes a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"}], :verb :delete}, :MediaService_ListByResourceGroup {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices", :description "Lists all of the Media Services in a resource group.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"}], :verb :get}, :MediaService_CheckNameAvailability {:path "/subscriptions/{subscriptionId}/providers/Microsoft.Media/CheckNameAvailability", :description "Checks whether the Media Service resource name is available. The name must be globally unique.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} {:description "Properties needed to check the availability of a name.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "CheckNameAvailabilityInput"}}], :verb :post}, :MediaService_Update {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}", :description "Updates a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"} {:description "Media Service properties needed for update.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "MediaService"}}], :verb :patch}, :MediaService_Get {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}", :description "Gets a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"}], :verb :get}, :MediaService_RegenerateKey {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/regenerateKey", :description "Regenerates a primary or secondary key for a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"} {:description "Properties needed to regenerate the Media Service key.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "RegenerateKeyInput"}}], :verb :post}, :MediaService_Create {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}", :description "Creates a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"} {:description "Media Service properties needed for creation.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "MediaService"}}], :verb :put}, :MediaService_SyncStorageKeys {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/syncStorageKeys", :description "Synchronizes storage account keys for a storage account associated with the Media Service account.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"} {:description "Properties needed to synchronize the keys for a storage account to the Media Service.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "SyncStorageKeysInput"}}], :verb :post}, :MediaService_ListKeys {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{mediaServiceName}/listKeys", :description "Lists the keys for a Media Service.", :parameters [#:reference{:parameters "subscriptionIdParameter"} #:reference{:parameters "apiVersionParameter"} #:reference{:parameters "resourceGroupNameParameter"} #:reference{:parameters "mediaResourceNameParameter"}], :verb :post}, :Operations_List {:path "/providers/Microsoft.Media/operations", :description "Lists all of the available Media Services REST API operations.", :parameters [#:reference{:parameters "apiVersionParameter"}], :verb :get}}, :parameters {:apiVersionParameter {:description "Version of the API to be used with the client request. The current version is 2015-10-01.", :in "query", :name "api-version", :required true, :type "string"}, :mediaResourceNameParameter {:description "Name of the Media Service.", :name "mediaServiceName", :type "string", :minLength 3, :x-ms-parameter-location "method", :maxLength 24, :required true, :in "path", :pattern "^[a-z0-9]{3,24}$"}, :resourceGroupNameParameter {:description "Name of the resource group within the Azure subscription.", :in "path", :name "resourceGroupName", :required true, :type "string", :x-ms-parameter-location "method"}, :subscriptionIdParameter {:description "The unique identifier for a Microsoft Azure subscription.", :in "path", :name "subscriptionId", :required true, :type "string"}}, :definitions {:ResourceType {:description "Type of MediaService resource.", :enum ["mediaservices"], :type "string", :x-ms-enum {:modelAsString false, :name "ResourceType"}}, :ServiceKeys {:description "The response body for a ListKeys API.", :example {:primaryAuthEndpoint "https://wamsprodglobal001acs.accesscontrol.windows.net/", :primaryKey "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx=", :scope "urn:windowsazuremediaservices", :secondaryAuthEndpoint "https://wamsprodglobal002acs.accesscontrol.windows.net/", :secondaryKey "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx="}, :properties {:primaryAuthEndpoint {:description "The primary authorization endpoint.", :type "string"}, :primaryKey {:description "The primary key for the Media Service resource.", :type "string"}, :scope {:description "The authorization scope.", :type "string"}, :secondaryAuthEndpoint {:description "The secondary authorization endpoint.", :type "string"}, :secondaryKey {:description "The secondary key for the Media Service resource.", :type "string"}}}, :ApiError {:description "The error returned from a failed Media Services REST API call.", :example {:error {:code "BadRequest", :message "Name availability check is not supported for type Microsoft.Media/mediaservices."}}, :properties {:code {:description "Error code.", :type "string"}, :message {:description "Error message.", :type "string"}}}, :StorageAccount {:description "The properties of a storage account associated with this resource.", :example {:id "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Storage/storageAccounts/contosomedia", :isPrimary true}, :properties {:id {:description "The id of the storage account resource. Media Services relies on tables and queues as well as blobs, so the primary storage account must be a Standard Storage account (either Microsoft.ClassicStorage or Microsoft.Storage). Blob only storage accounts can be added as secondary storage accounts (isPrimary false).", :type "string"}, :isPrimary {:description "Is this storage account resource the primary storage account for the Media Service resource. Blob only storage must set this to false.", :type "boolean"}}, :required ["id" "isPrimary"]}, :OperationListResult {:description "Result of the request to list Media Services operations.", :properties {:nextLink {:description "URL to get the next set of operation list results if there are any.", :readOnly true, :type "string"}, :value {:description "List of Media Services operations supported by the Microsoft.Media resource provider.", :items #:reference{:definitions "Operation"}, :readOnly true, :type "array"}}}, :MediaServiceProperties {:description "The additional properties of a Media Service resource.", :properties {:apiEndpoints {:description "Read-only property that lists the Media Services REST API endpoints for this resource. If supplied on a PUT or PATCH, the value will be ignored.", :items #:reference{:definitions "ApiEndpoint"}, :readOnly true, :type "array"}, :storageAccounts {:description "The storage accounts for this resource.", :items #:reference{:definitions "StorageAccount"}, :type "array"}}}, :Operation {:description "A Media Services REST API operation", :properties {:display {:description "The object that represents the operation.", :properties {:operation {:description "Operation type: Read, write, delete, etc.", :readOnly true, :type "string"}, :provider {:description "Service provider: Microsoft.Media", :readOnly true, :type "string"}, :resource {:description "Resource on which the operation is performed: Invoice, etc.", :readOnly true, :type "string"}}}, :name {:description "Operation name: {provider}/{resource}/{operation}", :readOnly true, :type "string"}}, :type "object"}, :CheckNameAvailabilityInput {:description "The request body for CheckNameAvailability API.", :example {:name "contosomedia", :type "mediaservices"}, :properties {:name {:description "The name of the resource. A name must be globally unique.", :maxLength 24, :minLength 3, :pattern "^[a-z0-9]{3,24}$", :type "string"}, :type #:reference{:definitions "ResourceType"}}, :required ["name" "type"]}, :MediaServiceCollection {:description "The collection of Media Service resources.", :properties {:value {:description "The collection of Media Service resources.", :items #:reference{:definitions "MediaService"}, :type "array"}}}, :SyncStorageKeysInput {:description "The request  body for a SyncStorageKeys API.", :example {:id "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Storage/storageAccounts/contosomedia"}, :properties {:id {:description "The id of the storage account resource.", :type "string"}}, :required ["id"]}, :RegenerateKeyInput {:description "The request body for a RegenerateKey API.", :example {:keyType "Primary"}, :properties {:keyType {:description "The keyType indicating which key you want to regenerate, Primary or Secondary.", :enum ["Primary" "Secondary"], :type "string", :x-ms-enum {:modelAsString false, :name "KeyType"}}}, :required ["keyType"]}, :ApiEndpoint {:description "The properties for a Media Services REST API endpoint.", :example {:endpoint "https://wamsbayclus001rest-hs.cloudapp.net/api/", :majorVersion "2"}, :properties {:endpoint {:description "The Media Services REST endpoint.", :type "string"}, :majorVersion {:description "The version of Media Services REST API.", :type "string"}}}, :CheckNameAvailabilityOutput {:description "The response body for CheckNameAvailability API.", :properties {:message {:description "Specifies the detailed reason if the name is not available.", :type "string"}, :nameAvailable {:description "Specifies if the name is available.", :type "boolean"}, :reason {:description "Specifies the reason if the name is not available.", :enum ["None" "Invalid" "AlreadyExists"], :type "string", :x-ms-enum {:modelAsString false, :name "EntityNameUnavailabilityReason"}}}}, :RegenerateKeyOutput {:description "The response body for a RegenerateKey API.", :example {:key "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx="}, :properties {:key {:description "The new value of either the primary or secondary key.", :type "string"}}}, :MediaService {:allOf [#:reference{:definitions "Resource"}], :description "The properties of a Media Service resource.", :example {:location "West US", :properties {:storageAccounts [{:id "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/contosoresources/providers/Microsoft.Storage/storageAccounts/contosomedia", :isPrimary true}]}}, :properties {:properties #:reference{:definitions "MediaServiceProperties"}}}, :Resource {:description "The Azure Resource Manager resource.", :properties {:id {:description "The id of the resource.", :readOnly true, :type "string"}, :location {:description "The geographic location of the resource. This must be one of the supported and registered Azure Geo Regions (for example, West US, East US, Southeast Asia, and so forth).", :type "string"}, :name {:description "The name of the resource.", :readOnly true, :type "string"}, :tags {:additionalProperties {:type "string"}, :description "Tags to help categorize the resource in the Azure portal.", :type "object"}, :type {:description "The type of the resource", :readOnly true, :type "string"}}, :x-ms-azure-resource true}}}