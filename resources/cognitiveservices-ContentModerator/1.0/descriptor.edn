{:scheme "https", :host "azure.local", :info {:description "You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.\r\n\r\nWhen using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB. \r\nText can be at most 1024 characters long. \r\nIf the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.", :title "Content Moderator Client", :version "1.0"}, :ops {:ImageModeration_FindFaces {:path "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces", :description "Returns the list of faces found.", :parameters [#:reference{:parameters "CacheImage"}], :verb :post}, :ListManagementImageLists_Delete {:path "/contentmoderator/lists/v1.0/imagelists/{listId}", :description "Deletes image list with the list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :delete}, :Reviews_GetVideoFrames {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames", :description "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.", :parameters [#:reference{:parameters "teamName"} #:reference{:parameters "reviewId"} {:description "Time stamp of the frame from where you want to start fetching the frames.", :in "query", :name "startSeed", :type "integer"} {:description "Number of frames to fetch.", :in "query", :name "noOfRecords", :type "integer"} {:description "Get frames filtered by tags.", :in "query", :name "filter", :type "string"}], :verb :get}, :ListManagementImageLists_Update {:path "/contentmoderator/lists/v1.0/imagelists/{listId}", :description "Updates an image list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"} {:description "The content type.", :in "header", :name "Content-Type", :required true, :type "string"} #:reference{:parameters "body"}], :verb :put}, :ListManagementImage_DeleteImage {:path "/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}", :description "Deletes an image from the list with list Id and image Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "ImageId"}], :verb :delete}, :ListManagementTermLists_GetAllTermLists {:path "/contentmoderator/lists/v1.0/termlists", :description "gets all the Term Lists", :parameters [], :verb :get}, :ListManagementImageLists_RefreshIndex {:path "/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex", :description "Refreshes the index of the list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :post}, :ListManagementTerm_GetAllTerms {:path "/contentmoderator/lists/v1.0/termlists/{listId}/terms", :description "Gets all terms from the list with list Id equal to the list Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "language"} {:description "The pagination start index.", :in "query", :name "offset", :required false, :type "integer"} {:description "The max limit.", :in "query", :name "limit", :required false, :type "integer"}], :verb :get}, :ListManagementImage_AddImage {:path "/contentmoderator/lists/v1.0/imagelists/{listId}/images", :description "Add an image to the list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "tag"} #:reference{:parameters "label"}], :verb :post}, :ListManagementImageLists_GetAllImageLists {:path "/contentmoderator/lists/v1.0/imagelists", :description "Gets all the Image Lists.", :parameters [], :verb :get}, :ListManagementTerm_DeleteTerm {:path "/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}", :description "Deletes a term from the list with list Id equal to the list Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "term"} #:reference{:parameters "language"}], :verb :delete}, :ListManagementTermLists_Create {:path "/contentmoderator/lists/v1.0/termlists", :description "Creates a Term List", :parameters [{:description "The content type.", :in "header", :name "Content-Type", :required true, :type "string"} #:reference{:parameters "body"}], :verb :post}, :Reviews_AddVideoFrame {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames", :description "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.", :parameters [#:reference{:parameters "teamName"} {:description "Id of the review.", :in "path", :name "reviewId", :required true, :type "string"} {:description "Timescale of the video you are adding frames to.", :in "query", :name "timescale", :required false, :type "integer"}], :verb :post}, :ListManagementTermLists_Delete {:path "/contentmoderator/lists/v1.0/termlists/{listId}", :description "Deletes term list with the list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :delete}, :Reviews_CreateReviews {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews", :description "The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.\r\n\r\n<h3>CallBack Schemas </h3>\r\n<h4>Review Completion CallBack Sample</h4>\r\n<p>\r\n{<br/>\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.", :parameters [{:description "The content type.", :in "header", :name "UrlContentType", :required true, :type "string"} #:reference{:parameters "teamName"} #:reference{:parameters "subTeam"} {:description "Body for create reviews API", :in "body", :name "createReviewBody", :required true, :schema {:description "Schema of the body.", :items {:description "Schema items of the body.", :properties {:CallbackEndpoint {:description "Optional CallbackEndpoint.", :type "string"}, :Content {:description "Content to review.", :type "string"}, :ContentId {:description "Content Identifier.", :type "string"}, :Metadata {:description "Optional metadata details.", :items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :Type {:description "Type of the content.", :enum ["Image" "Text"], :type "string"}}, :required ["Content" "ContentId" "Type"], :type "object"}, :type "array"}}], :verb :post}, :ListManagementImage_DeleteAllImages {:path "/contentmoderator/lists/v1.0/imagelists/{listId}/images", :description "Deletes all images from the list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :delete}, :ListManagementTermLists_RefreshIndex {:path "/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex", :description "Refreshes the index of the list with list Id equal to list ID passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "language"}], :verb :post}, :Reviews_PublishVideoReview {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish", :description "Publish video review to make it available for review.", :parameters [#:reference{:parameters "teamName"} #:reference{:parameters "reviewId"}], :verb :post}, :Reviews_GetJobDetails {:path "/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}", :description "Get the Job Details for a Job Id.", :parameters [{:description "Your Team Name.", :in "path", :name "teamName", :required true, :type "string"} {:description "Id of the job.", :in "path", :name "JobId", :required true, :type "string"}], :verb :get}, :Reviews_GetReview {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}", :description "Returns review details for the review Id passed.", :parameters [{:description "Your Team Name.", :in "path", :name "teamName", :required true, :type "string"} {:description "Id of the review.", :in "path", :name "reviewId", :required true, :type "string"}], :verb :get}, :ListManagementImageLists_Create {:path "/contentmoderator/lists/v1.0/imagelists", :description "Creates an image list.", :parameters [{:description "The content type.", :in "header", :name "Content-Type", :required true, :type "string"} #:reference{:parameters "body"}], :verb :post}, :TextModeration_DetectLanguage {:path "/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage", :description "This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.", :parameters [{:description "The content type.", :enum ["text/plain" "text/html" "text/xml" "text/markdown"], :in "header", :name "Content-Type", :required true, :type "string", :x-ms-client-name "textContentType"} #:reference{:parameters "textContent"}], :verb :post}, :ListManagementImage_GetAllImageIds {:path "/contentmoderator/lists/v1.0/imagelists/{listId}/images", :description "Gets all image Ids from the list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :get}, :Reviews_AddVideoTranscriptModerationResult {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult", :description "This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.", :parameters [{:description "The content type.", :in "header", :name "Content-Type", :required true, :type "string", :x-ms-client-name "ContentType"} #:reference{:parameters "teamName"} #:reference{:parameters "reviewId"} #:reference{:parameters "transcriptModerationBody"}], :verb :put}, :Reviews_CreateJob {:path "/contentmoderator/review/v1.0/teams/{teamName}/jobs", :description "A job Id will be returned for the content posted on this endpoint. \r\n\r\nOnce the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.\r\n\r\n<h3>CallBack Schemas </h3>\r\n\r\n<p>\r\n<h4>Job Completion CallBack Sample</h4><br/>\r\n\r\n{<br/>\r\n  \"JobId\": \"<Job Id>,<br/>\r\n  \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>\r\n  \"WorkFlowId\": \"default\",<br/>\r\n  \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>\r\n  \"ContentType\": \"Image\",<br/>\r\n  \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>\r\n  \"CallBackType\": \"Job\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>\r\n<p>\r\n<h4>Review Completion CallBack Sample</h4><br/>\r\n\r\n{\r\n  \"ReviewId\": \"<Review Id>\",<br/>\r\n  \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>\r\n  \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>\r\n  \"CallBackType\": \"Review\",<br/>\r\n  \"ContentId\": \"<The ContentId that was specified input>\",<br/>\r\n  \"Metadata\": {<br/>\r\n    \"adultscore\": \"0.xxx\",\r\n    \"a\": \"False\",<br/>\r\n    \"racyscore\": \"0.xxx\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  },<br/>\r\n  \"ReviewerResultTags\": {<br/>\r\n    \"a\": \"False\",<br/>\r\n    \"r\": \"True\"<br/>\r\n  }<br/>\r\n}<br/>\r\n\r\n</p>.", :parameters [#:reference{:parameters "teamName"} #:reference{:parameters "ContentType"} #:reference{:parameters "ContentId"} #:reference{:parameters "WorkflowName"} #:reference{:parameters "CallBackEndpoint"} {:description "The content type.", :enum ["application/json" "image/jpeg"], :in "header", :name "Content-Type", :required true, :type "string", :x-ms-client-name "jobContentType"} {:description "Content to evaluate.", :in "body", :name "Content", :required true, :schema {:properties {:ContentValue {:description "Content to evaluate for a job.", :type "string"}}, :required ["ContentValue"], :type "object"}, :x-examples {"application/json" "{\n  \"ContentValue\": \"<Replace with you Image Url>\"\n}"}}], :verb :post}, :ImageModeration_Evaluate {:path "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate", :description "Returns probabilities of the image containing racy or adult content.", :parameters [#:reference{:parameters "CacheImage"}], :verb :post}, :Reviews_AddVideoTranscript {:path "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript", :description "This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.", :parameters [#:reference{:parameters "teamName"} #:reference{:parameters "reviewId"} {:description "The content type.", :enum ["text/plain"], :in "header", :name "Content-Type", :required true, :type "string", :x-ms-client-name "ContentType"} #:reference{:parameters "transcriptFile"}], :verb :put}, :ImageModeration_OCR {:path "/contentmoderator/moderate/v1.0/ProcessImage/OCR", :description "Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.", :parameters [#:reference{:parameters "language"} #:reference{:parameters "CacheImage"} #:reference{:parameters "enhanced"}], :verb :post}, :ListManagementImageLists_GetDetails {:path "/contentmoderator/lists/v1.0/imagelists/{listId}", :description "Returns the details of the image list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :get}, :ListManagementTermLists_Update {:path "/contentmoderator/lists/v1.0/termlists/{listId}", :description "Updates an Term List.", :parameters [#:reference{:parameters "listId"} {:description "The content type.", :in "header", :name "Content-Type", :required true, :type "string"} #:reference{:parameters "body"}], :verb :put}, :ImageModeration_Match {:path "/contentmoderator/moderate/v1.0/ProcessImage/Match", :description "Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API. \r\n\r\nReturns ID and tags of matching image.<br/>\r\n<br/>\r\nNote: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.", :parameters [#:reference{:parameters "listIdQueryParameter"} #:reference{:parameters "CacheImage"}], :verb :post}, :TextModeration_ScreenText {:path "/contentmoderator/moderate/v1.0/ProcessText/Screen/", :description "Detects profanity in more than 100 languages and match against custom and shared blacklists.", :parameters [#:reference{:parameters "textLanguage"} #:reference{:parameters "autocorrect"} #:reference{:parameters "PII"} #:reference{:parameters "listIdQueryParameter"} #:reference{:parameters "classify"} {:description "The content type.", :enum ["text/plain" "text/html" "text/xml" "text/markdown"], :in "header", :name "Content-Type", :required true, :type "string", :x-ms-client-name "textContentType"} #:reference{:parameters "textContent"}], :verb :post}, :ListManagementTerm_AddTerm {:path "/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}", :description "Add a term to the term list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "term"} #:reference{:parameters "language"}], :verb :post}, :ListManagementTerm_DeleteAllTerms {:path "/contentmoderator/lists/v1.0/termlists/{listId}/terms", :description "Deletes all terms from the list with list Id equal to the list Id passed.", :parameters [#:reference{:parameters "listId"} #:reference{:parameters "language"}], :verb :delete}, :ListManagementTermLists_GetDetails {:path "/contentmoderator/lists/v1.0/termlists/{listId}", :description "Returns list Id details of the term list with list Id equal to list Id passed.", :parameters [#:reference{:parameters "listId"}], :verb :get}}, :parameters {:videoFrameBody {:description "Body for add video frames API", :in "body", :name "videoFrameBody", :required true, :schema {:description "Schema of the body.", :items {:description "Schema items of the body.", :properties {:FrameImage {:description "Content to review.", :type "string"}, :Metadata {:description "Optional metadata details.", :items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :ReviewerResultTags {:items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :Timestamp {:description "Timestamp of the frame.", :type "string"}}, :required ["Timestamp" "FrameImage"], :type "object"}, :type "array"}, :x-ms-parameter-location "method"}, :transcriptFile {:description "Transcript file of the video.", :in "body", :name "VTT file", :required true, :schema {:format "file", :type "object"}, :x-ms-parameter-location "method"}, :classify {:default false, :description "Classify input.", :in "query", :name "classify", :required false, :type "boolean", :x-ms-parameter-location "method"}, :ContentId {:description "Id/Name to identify the content submitted.", :in "query", :name "ContentId", :required true, :type "string", :x-ms-parameter-location "method"}, :Endpoint {:description "Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).", :in "path", :name "Endpoint", :required true, :type "string", :x-ms-parameter-location "client", :x-ms-skip-url-encoding true}, :ImageId {:description "Id of the image.", :in "path", :name "ImageId", :required true, :type "string", :x-ms-parameter-location "method"}, :PII {:default false, :description "Detect personal identifiable information.", :in "query", :name "PII", :required false, :type "boolean", :x-ms-parameter-location "method"}, :reviewId {:description "Id of the review.", :in "path", :name "reviewId", :required true, :type "string", :x-ms-parameter-location "method"}, :teamName {:description "Your team name.", :in "path", :name "teamName", :required true, :type "string", :x-ms-parameter-location "method"}, :ImageStreamParameter {:description "The image file.", :in "body", :name "ImageStream", :required true, :schema {:format "file", :type "object"}, :x-ms-parameter-location "method"}, :textLanguage {:description "Language of the text.", :in "query", :name "language", :type "string", :x-ms-parameter-location "method"}, :transcriptModerationBody {:description "Body for add video transcript moderation result API", :in "body", :name "transcriptModerationBody", :required true, :schema {:description "Schema of the body.", :items {:description "Schema items of the body.", :properties {:Terms {:description "Optional metadata details.", :items {:properties {:Index {:description "Index of the word", :type "integer"}, :Term {:description "Detected word.", :type "string"}}, :required ["Index" "Term"], :type "object"}, :type "array"}, :Timestamp {:description "Timestamp of the image.", :type "string"}}, :required ["Timestamp" "Terms"], :type "object"}, :type "array"}, :x-ms-parameter-location "method"}, :timescale {:description "Timescale of the video.", :in "query", :name "timescale", :required false, :type "integer", :x-ms-parameter-location "method"}, :autocorrect {:default false, :description "Autocorrect text.", :in "query", :name "autocorrect", :required false, :type "boolean", :x-ms-parameter-location "method"}, :ImageUrlParameter {:description "The image url.", :in "body", :name "ImageUrl", :required true, :schema {:properties {:DataRepresentation {:default "URL", :type "string"}, :Value {:type "string"}}, :type "object"}, :x-ms-parameter-location "method"}, :WorkflowName {:description "Workflow Name that you want to invoke.", :in "query", :name "WorkflowName", :required true, :type "string", :x-ms-parameter-location "method"}, :term {:description "Term to be deleted", :in "path", :name "term", :required true, :type "string", :x-ms-parameter-location "method"}, :listId {:description "List Id of the image list.", :in "path", :name "listId", :required true, :type "string", :x-ms-parameter-location "method"}, :language {:description "Language of the terms.", :in "query", :name "language", :required true, :type "string", :x-ms-parameter-location "method"}, :label {:description "The image label.", :in "query", :name "label", :required false, :type "string", :x-ms-parameter-location "method"}, :subTeam {:description "SubTeam of your team, you want to assign the created review to.", :in "query", :name "subTeam", :required false, :type "string", :x-ms-parameter-location "method"}, :CacheImage {:description "Whether to retain the submitted image for future use; defaults to false if omitted.", :in "query", :name "CacheImage", :type "boolean", :x-ms-parameter-location "method"}, :enhanced {:default false, :description "When set to True, the image goes through additional processing to come with additional candidates.\n\nimage/tiff is not supported when enhanced is set to true\n\nNote: This impacts the response time.", :in "query", :name "enhanced", :type "boolean", :x-ms-parameter-location "method"}, :tag {:description "Tag for the image.", :in "query", :name "tag", :required false, :type "integer", :x-ms-parameter-location "method"}, :ContentType {:description "Image, Text or Video.", :enum ["Image" "Text" "Video"], :in "query", :name "ContentType", :required true, :type "string", :x-ms-parameter-location "method"}, :textContent {:description "Content to screen.", :in "body", :name "Text Content", :required true, :schema {:format "file", :type "object"}, :x-ms-parameter-location "method"}, :body {:description "Schema of the body.", :in "body", :name "body", :required true, :schema {:properties {:Description {:description "Description of the list.", :type "string"}, :Metadata {:additionalProperties {:type "string"}, :description "Metadata of the list.", :type "object"}, :Name {:description "Name of the list.", :type "string"}}, :type "object"}, :x-ms-parameter-location "method"}, :CallBackEndpoint {:description "Callback endpoint for posting the create job result.", :in "query", :name "CallBackEndpoint", :type "string", :x-ms-parameter-location "method"}, :CreateVideoReviewsBody {:description "Body for create reviews API", :in "body", :name "CreateVideoReviewsBody", :required true, :schema {:description "Schema of the body.", :items {:description "Schema items of the body.", :properties {:CallbackEndpoint {:description "Optional CallbackEndpoint.", :type "string"}, :Content {:description "Video content url to review.", :type "string"}, :ContentId {:description "Content Identifier.", :type "string"}, :Metadata {:description "Optional metadata details.", :items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :Status {:description "Status of the video(Complete,Unpublished,Pending)", :enum ["Complete" "Unpublished" "Pending"], :type "string"}, :Timescale {:description "Timescale of the video.", :type "integer"}, :Type {:description "Type of the content.", :enum ["Video"], :type "string"}, :VideoFrames {:description "Optional metadata details.", :items {:properties {:FrameImage {:description "Frame image Url.", :type "string"}, :Id {:description "Id of the frame.", :type "string"}, :Metadata {:description "Optional metadata details.", :items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :ReviewerResultTags {:items {:properties {:Key {:description "Your key parameter.", :type "string"}, :Value {:description "Your value parameter.", :type "string"}}, :required ["Key" "Value"], :type "object"}, :type "array"}, :Timestamp {:description "Timestamp of the frame.", :type "integer"}}, :required ["Id" "Timestamp" "FrameImage"], :type "object"}, :type "array"}}, :required ["Content" "ContentId" "Type" "Status"], :type "object"}, :type "array"}, :x-ms-parameter-location "method"}, :listIdQueryParameter {:description "The list Id.", :in "query", :name "listId", :type "string", :x-ms-parameter-location "method"}}, :definitions {:Evaluate {:description "Evaluate response object.", :properties {:CacheID {:description "The cache id.", :type "string"}, :IsImageRacyClassified {:description "Indicates if the image is classified as racy.", :type "boolean"}, :Result {:description "Evaluate result.", :type "boolean"}, :AdultClassificationScore {:description "The adult classification score.", :type "number"}, :RacyClassificationScore {:description "The racy classification score.", :type "number"}, :TrackingId {:description "The tracking id.", :type "string"}, :AdvancedInfo {:description "The advanced info.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :IsImageAdultClassified {:description "Indicates if an image is classified as adult.", :type "boolean"}, :Status #:reference{:definitions "Status"}}}, :Classification {:description "The classification details of the text.", :properties {:Category1 {:description "The category1 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification.", :properties {:Score {:description "The category1 score.", :type "number"}}}, :Category2 {:description "The category2 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification.", :properties {:Score {:description "The category2 score.", :type "number"}}}, :Category3 {:description "The category3 score details of the text. <a href=\"https://aka.ms/textClassifyCategories\">Click here</a> for more details on category classification.", :properties {:Score {:description "The category3 score.", :type "number"}}}, :ReviewRecommended {:description "The review recommended flag.", :type "boolean"}}}, :Tag {:description "Tag details.", :properties {:Key {:description "The key parameter.", :type "string"}, :Value {:description "The value parameter.", :type "string"}}}, :ImageList {:description "Image List Properties.", :properties {:Description {:description "Description for image list.", :type "string"}, :Id {:description "Image List Id.", :type "integer"}, :Metadata {:additionalProperties {:type "string"}, :description "Image List Metadata.", :type "object"}, :Name {:description "Image List Name.", :type "string"}}}, :APIError {:description "Error information returned by the API", :properties {:Error #:reference{:definitions "Error"}}, :type "object"}, :MatchResponse {:description "The response for a Match request.", :properties {:CacheID {:description "The cache id.", :type "string"}, :IsMatch {:description "Indicates if there is a match.", :type "boolean"}, :Matches {:description "The match details.", :items #:reference{:definitions "Match"}, :type "array"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "The tracking id.", :type "string"}}}, :JobListResult {:description "The list of job ids.", :properties {:Value {:description "The job id.", :items {:type "string"}, :type "array"}}}, :Review {:description "The Review object.", :properties {:ReviewId {:description "Id of the review.", :type "string"}, :ContentId {:description "Id of the content.", :type "string"}, :CallbackEndpoint {:description "The callback endpoint.", :type "string"}, :ReviewerResultTags {:description "Array of KeyValue with Reviewer set Tags.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :SubTeam {:description "Name of the subteam.", :type "string"}, :Metadata {:description "Array of KeyValue.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :CreatedBy {:description "The reviewer name.", :type "string"}, :Type {:description "The type of content.", :type "string"}, :Content {:description "The content value.", :type "string"}, :Status {:description "The status string (<Pending, Complete>).", :type "string"}}}, :Terms {:description "Terms properties.", :properties {:Data #:reference{:definitions "TermsData"}, :Paging {:description "Paging details.", :properties {:Limit {:description "Limit details.", :type "integer"}, :Offset {:description "Offset details.", :type "integer"}, :Returned {:description "Returned text details.", :type "integer"}, :Total {:description "Total details.", :type "integer"}}}}}, :Image {:description "Image Properties.", :properties {:AdditionalInfo {:description "Advanced info list.", :items {:properties {:Key {:description "Key parameter.", :type "string"}, :Value {:description "Value parameter.", :type "string"}}, :type "object"}, :type "array"}, :ContentId {:description "Content Id.", :type "string"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "Tracking Id.", :type "string"}}}, :IPA {:description "IP Address details.", :properties {:Index {:description "Index(Location) of the IP Address in the input text content.", :type "integer"}, :SubType {:description "Subtype of the detected IP Address.", :type "string"}, :Text {:description "Detected IP Address.", :type "string"}}}, :KeyValuePair {:description "The key value pair object properties.", :properties {:Key {:description "The key parameter.", :type "string"}, :Value {:description "The value parameter.", :type "string"}}}, :JobId {:properties {:JobId {:description "Id of the created job.", :type "string"}}}, :FoundFaces {:description "Request object the contains found faces.", :properties {:AdvancedInfo {:description "The advanced info.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :CacheId {:description "The cache id.", :type "string"}, :Count {:description "Number of faces found.", :type "integer"}, :Faces {:description "The list of faces.", :items #:reference{:definitions "Face"}, :type "array"}, :Result {:description "True if result was found.", :type "boolean"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "The tracking id.", :type "string"}}}, :PII {:description "Personal Identifier Information details.", :properties {:Address {:items #:reference{:definitions "Address"}, :type "array"}, :Email {:items #:reference{:definitions "Email"}, :type "array"}, :IPA {:items #:reference{:definitions "IPA"}, :type "array"}, :Phone {:items #:reference{:definitions "Phone"}, :type "array"}, :SSN {:items #:reference{:definitions "SSN"}, :type "array"}}}, :SSN {:description "Detected SSN details.", :properties {:Index {:description "Index(Location) of the SSN in the input text content.", :type "integer"}, :Text {:description "Detected SSN in the input text content.", :type "string"}}}, :Email {:description "Email Address details.", :properties {:Detected {:description "Detected Email Address from the input text content.", :type "string"}, :Index {:description "Index(Location) of the Email address in the input text content.", :type "integer"}, :SubType {:description "Subtype of the detected Email Address.", :type "string"}, :Text {:description "Email Address in the input text content.", :type "string"}}}, :Screen {:description "The response for a Screen text request.", :properties {:Classification #:reference{:definitions "Classification"}, :Terms {:items #:reference{:definitions "DetectedTerms"}, :type "array"}, :PII #:reference{:definitions "PII"}, :Misrepresentation {:description "The misrepresentation text.", :items {:type "string"}, :type "array"}, :OriginalText {:description "The original text.", :type "string"}, :TrackingId {:description "Unique Content Moderator transaction Id.", :type "string"}, :Language {:description "Language of the input text content.", :type "string"}, :AutoCorrectedText {:description "The autocorrected text", :type "string"}, :NormalizedText {:description "The normalized text.", :type "string"}, :Status #:reference{:definitions "Status"}}}, :TermsData {:description "All term Id response properties.", :properties {:Language {:description "Language of the terms.", :type "string"}, :Status #:reference{:definitions "Status"}, :Terms {:description "List of terms.", :items #:reference{:definitions "TermsInList"}, :type "array"}, :TrackingId {:description "Tracking Id.", :type "string"}}}, :Address {:description "Address details.", :properties {:Index {:description "Index(Location) of the Address in the input text content.", :type "integer"}, :Text {:description "Detected Address.", :type "string"}}}, :ImageIds {:description "Image Id properties.", :properties {:ContentIds {:description "Id of the contents.", :items {:type "integer"}, :type "array"}, :ContentSource {:description "Source of the content.", :type "string"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "Tracking Id.", :type "string"}}}, :Face {:description "Coordinates to the found face.", :properties {:Bottom {:description "The bottom coordinate.", :type "integer"}, :Left {:description "The left coordinate.", :type "integer"}, :Right {:description "The right coordinate.", :type "integer"}, :Top {:description "The top coordinate.", :type "integer"}}}, :Job {:description "The Job object.", :properties {:ReviewId {:description "Review Id if one is created.", :type "string"}, :WorkflowId {:description "The Id of the workflow.", :type "string"}, :Id {:description "The job id.", :type "string"}, :JobExecutionReport {:description "Job execution report- Array of KeyValue pairs object.", :items #:reference{:definitions "JobExecutionReportDetails"}, :type "array"}, :TeamName {:description "The team name associated with the job.", :type "string"}, :ResultMetaData {:description "Array of KeyValue pairs.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :Type {:description "Type of the content.", :type "string"}, :CallBackEndpoint {:description "The callback endpoint.", :type "string"}, :Status {:description "The status string (<Pending, Failed, Completed>).", :type "string"}}}, :Frames {:description "The response for a Get Frames request.", :properties {:ReviewId {:description "Id of the review.", :type "string"}, :VideoFrames {:items #:reference{:definitions "Frame"}, :type "array"}}}, :Phone {:description "Phone Property details.", :properties {:CountryCode {:description "CountryCode of the detected Phone number.", :type "string"}, :Index {:description "Index(Location) of the Phone number in the input text content.", :type "integer"}, :Text {:description "Detected Phone number.", :type "string"}}}, :TermsInList {:description "Terms in list Id passed.", :properties {:Term {:description "Added term details.", :type "string"}}}, :DetectedLanguage {:description "Detect language result.", :properties {:DetectedLanguage {:description "The detected language.", :type "string"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "The tracking id.", :type "string"}}}, :TermList {:description "Term List  Properties.", :properties {:Description {:description "Description for term list.", :type "string"}, :Id {:description "Term list Id.", :type "integer"}, :Metadata {:additionalProperties {:type "string"}, :description "Term list metadata.", :type "object"}, :Name {:description "Term list name.", :type "string"}}}, :ImageLists {:items #:reference{:definitions "ImageList"}, :type "array"}, :TermLists {:items #:reference{:definitions "TermList"}, :type "array"}, :ReviewList {:description "The list of review ids.", :items {:type "string"}, :type "array"}, :Frame {:description "Video frame property details.", :properties {:FrameImage {:description "Frame image.", :type "string"}, :Metadata {:description "Array of KeyValue.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :ReviewerResultTags {:description "Reviewer result tags.", :items #:reference{:definitions "Tag"}, :type "array"}, :Timestamp {:description "Timestamp of the frame.", :type "string"}}}, :Candidate {:description "OCR candidate text.", :properties {:Confidence {:description "The confidence level.", :type "number"}, :Text {:description "The text found.", :type "string"}}}, :Error {:description "Error body.", :properties {:Code {:type "string"}, :Message {:type "string"}}, :type "object"}, :DetectedTerms {:description "Detected Terms details.", :properties {:Index {:description "Index(Location) of the detected profanity term in the input text content.", :type "integer"}, :ListId {:description "Matched Terms list Id.", :type "integer"}, :OriginalIndex {:description "Original Index(Location) of the detected profanity term in the input text content.", :type "integer"}, :Term {:description "Detected profanity term.", :type "string"}}}, :Match {:description "The match details.", :properties {:Label {:description "The label.", :type "string"}, :MatchId {:description "The match id.", :type "integer"}, :Score {:description "Confidence score of the image match.", :type "number"}, :Source {:description "The source.", :type "string"}, :Tags {:description "The tags for match details.", :items {:type "integer"}, :type "array"}}}, :OCR {:description "Contains the text found in image for the language specified.", :properties {:CacheId {:description "The cache id.", :type "string"}, :Candidates {:description "The list of candidate text.", :items #:reference{:definitions "Candidate"}, :type "array"}, :Language {:description "The ISO 639-3 code.", :type "string"}, :Metadata {:description "Array of KeyValue.", :items #:reference{:definitions "KeyValuePair"}, :type "array"}, :Status #:reference{:definitions "Status"}, :Text {:description "The found text.", :type "string"}, :TrackingId {:description "The tracking id.", :type "string"}}}, :JobExecutionReportDetails {:description "Job Execution Report Values.", :properties {:Msg {:description "Message details.", :type "string"}, :Ts {:description "Time details.", :type "string"}}}, :RefreshIndex {:description "Refresh Index Response.", :properties {:AdvancedInfo {:description "Advanced info list.", :items {:additionalProperties {:type "string"}, :type "object"}, :type "array"}, :ContentSourceId {:description "Content source Id.", :type "string"}, :IsUpdateSuccess {:description "Update success status.", :type "boolean"}, :Status #:reference{:definitions "Status"}, :TrackingId {:description "Tracking Id.", :type "string"}}}, :Status {:description "Status properties.", :properties {:Code {:description "Status code.", :type "integer"}, :Description {:description "Status description.", :type "string"}, :Exception {:description "Exception status.", :type "string"}}}}}