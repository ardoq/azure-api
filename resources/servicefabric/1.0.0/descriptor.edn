{:scheme "https", :host "azure.local:19080", :info {:title "ServiceFabricClient", :version "1.0.0"}, :ops {:Partitions_List {:path "/Services/{serviceName}/$/GetPartitions", :description "List partitions", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :NodeStates_Remove {:path "/Nodes/{nodeName}/$/RemoveNodeState", :description "Remove node states", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ReplicaLoadInformations_Get {:path "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetLoadInformation", :description "Get replica load informations", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The id of the replica", :in "path", :name "replicaId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationTypes_Get {:path "/ApplicationTypes/{applicationTypeName}", :description "Get application types", :parameters [{:description "The name of the application type", :in "path", :name "applicationTypeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Applications_Get {:path "/Applications/{applicationName}", :description "Get applications", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceFromTemplates_Create {:path "/Applications/{applicationName}/$/GetServices/$/CreateFromTemplate", :description "Create service from templates", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The template of the service description", :in "body", :name "serviceDescriptionTemplate", :required true, :schema #:reference{:definitions "ServiceDescriptionTemplate"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Nodes_Disable {:path "/Nodes/{nodeName}/$/Deactivate", :description "Disable nodes", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The node", :in "body", :name "disableNode", :required true, :schema #:reference{:definitions "DisableNode"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Services_Update {:path "/Services/{serviceName}/$/Update", :description "Update services", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the service update", :in "body", :name "updateServiceDescription", :required true, :schema #:reference{:definitions "UpdateServiceDescription"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Nodes_Get {:path "/Nodes/{nodeName}", :description "Get nodes", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Applications_Remove {:path "/Applications/{applicationName}/$/Delete", :description "Remove applications", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The force remove flag to skip services check", :in "query", :name "ForceRemove", :required false, :type "boolean"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Nodes_Enable {:path "/Nodes/{nodeName}/$/Activate", :description "Enable nodes", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedApplications_List {:path "/Nodes/{nodeName}/$/GetApplications", :description "List deployed applications", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Replicas_Get {:path "/Partitions/{partitionId}/$/GetReplicas/{replicaId}", :description "Get replicas", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The id of the replica", :in "path", :name "replicaId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ClusterUpgrades_Update {:path "/$/UpdateUpgrade", :description "Update cluster upgrades", :parameters [{:description "The description of the update cluster upgrade", :in "body", :name "updateClusterUpgrade", :required true, :schema #:reference{:definitions "UpdateClusterUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :NodeHealths_Get {:path "/Nodes/{nodeName}/$/GetHealth", :description "Get node healths", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Services_Create {:path "/Applications/{applicationName}/$/GetServices/$/Create", :description "Create services", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the service", :in "body", :name "createServiceDescription", :required true, :schema #:reference{:definitions "CreateServiceDescription"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :PartitionHealths_Send {:path "/Partitions/{partitionId}/$/ReportHealth", :description "Send partition health", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The report of the partition health", :in "body", :name "partitionHealthReport", :required true, :schema #:reference{:definitions "PartitionHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ReplicaHealths_Send {:path "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/ReportHealth", :description "Send replica healths", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The id of the replica", :in "path", :name "replicaId", :required true, :type "string"} {:description "The report of the replica health", :in "body", :name "replicaHealthReport", :required true, :schema #:reference{:definitions "ReplicaHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ClusterUpgrades_Start {:path "/$/Upgrade", :description "Start cluster upgrades", :parameters [{:description "The description of the start cluster upgrade", :in "body", :name "startClusterUpgrade", :required true, :schema #:reference{:definitions "StartClusterUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ApplicationTypes_List {:path "/ApplicationTypes", :description "List application types", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceGroupFromTemplates_Create {:path "/Applications/{applicationName}/$/GetServiceGroups/$/CreateServiceGroupFromTemplate", :description "Create service group from templates", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The template of the service description", :in "body", :name "serviceDescriptionTemplate", :required true, :schema #:reference{:definitions "ServiceDescriptionTemplate"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :NodeHealths_Send {:path "/Nodes/{nodeName}/$/ReportHealth", :description "Send node health", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The report of the node health", :in "body", :name "nodeHealthReport", :required true, :schema #:reference{:definitions "NodeHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Applications_Create {:path "/Applications/$/Create", :description "Create applications", :parameters [{:description "The description of the application", :in "body", :name "applicationDescription", :required true, :schema #:reference{:definitions "ApplicationDescription"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedApplicationHealths_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetHealth", :description "Get deployed application healths", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} {:description "The filter of the deployed service packages health state", :in "query", :name "DeployedServicePackagesHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :DeployedServiceTypes_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServiceTypes", :description "Get deployed service types", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceGroupDescriptions_Get {:path "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupDescription", :description "Get service group descriptions", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationUpgrades_Get {:path "/Applications/{applicationName}/$/GetUpgradeProgress", :description "Get application upgrades", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ClusterUpgrades_Rollback {:path "/$/RollbackUpgrade", :description "Rollback cluster upgrades", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ServiceDescriptions_Get {:path "/Services/{serviceName}/$/GetDescription", :description "Get service descriptions", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationManifests_Get {:path "/ApplicationTypes/{applicationTypeName}/$/GetApplicationManifest", :description "Get application manifests", :parameters [{:description "The name of the application type", :in "path", :name "applicationTypeName", :required true, :type "string"} {:description "The version of the application type", :in "query", :name "ApplicationTypeVersion", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationUpgrades_Start {:path "/Applications/{applicationName}/$/Upgrade", :description "Start application upgrades", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the start application upgrade", :in "body", :name "startApplicationUpgrade", :required true, :schema #:reference{:definitions "StartApplicationUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ApplicationTypes_Register {:path "/ApplicationTypes/$/Provision", :description "Register application types", :parameters [{:description "The type of the register application", :in "body", :name "registerApplicationType", :required true, :schema #:reference{:definitions "RegisterApplicationType"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ApplicationTypes_Unregister {:path "/ApplicationTypes/{applicationTypeName}/$/Unprovision", :description "Unregister application types", :parameters [{:description "The name of the application type", :in "path", :name "applicationTypeName", :required true, :type "string"} {:description "The type of the unregister application", :in "body", :name "unregisterApplicationType", :required true, :schema #:reference{:definitions "UnregisterApplicationType"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Services_List {:path "/Applications/{applicationName}/$/GetServices", :description "List services", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationUpgrades_Resume {:path "/Applications/{applicationName}/$/MoveNextUpgradeDomain", :description "Resume application upgrades", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The upgrade of the resume application", :in "body", :name "resumeApplicationUpgrade", :required true, :schema #:reference{:definitions "ResumeApplicationUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ClusterUpgrades_Resume {:path "/$/MoveToNextUpgradeDomain", :description "Resume cluster upgrades", :parameters [{:description "The upgrade of the cluster", :in "body", :name "resumeClusterUpgrade", :required true, :schema #:reference{:definitions "ResumeClusterUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ClusterHealths_Send {:path "/$/ReportClusterHealth", :description "Report cluster healths", :parameters [{:description "The report of the cluster health", :in "body", :name "clusterHealthReport", :required true, :schema #:reference{:definitions "ClusterHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedServicePackageHealths_Send {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{serviceManifestName}/$/ReportHealth", :description "Send deployed service package health", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service manifest", :in "path", :name "serviceManifestName", :required true, :type "string"} {:description "The report of the deployed service package health", :in "body", :name "deployedServicePackageHealthReport", :required true, :schema #:reference{:definitions "DeployedServiceHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ServiceHealths_Get {:path "/Services/{serviceName}/$/GetHealth", :description "Get service healths", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Services_Resolve {:path "/Services/{serviceName}/$/ResolvePartition", :description "Resolve services", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The type of the partition key", :in "query", :name "PartitionKeyType", :required false, :type "integer"} {:description "The value of the partition key", :in "query", :name "PartitionKeyValue", :required false, :type "string"} {:description "The version of the previous rsp", :in "query", :name "PreviousRspVersion", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :DeployedReplicaDetails_Get {:path "/Nodes/{nodeName}/$/GetPartitions/{partitionName}/$/GetReplicas/{replicaId}/$/GetDetail", :description "Get deployed replica details", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the partition", :in "path", :name "partitionName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The id of the replica", :in "path", :name "replicaId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationHealths_Get {:path "/Applications/{applicationName}/$/GetHealth", :description "Get application healths", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} {:description "The filter of the deployed application health state", :in "query", :name "DeployedApplicationsHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationUpgradeRollbacks_Start {:path "/Applications/{applicationName}/$/RollbackUpgrade", :description "Start application upgrade rollbacks", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ClusterPackages_Unregister {:path "/$/Unprovision", :description "Unregister cluster packages", :parameters [{:description "The package of the unregister cluster", :in "body", :name "unregisterClusterPackage", :required true, :schema #:reference{:definitions "UnregisterClusterPackage"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ClusterHealths_Get {:path "/$/GetClusterHealth", :description "Get cluster healths", :parameters [{:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} {:description "The filter of the nodes health state", :in "query", :name "NodesHealthStateFilter", :required false, :type "string"} {:description "The filter of the applications health state", :in "query", :name "ApplicationsHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :PartitionLists_Repair {:path "/Services/{serviceName}/$/GetPartitions/$/Recover", :description "Repair partition lists", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :PartitionLoads_Reset {:path "/Partitions/{partitionId}/$/ResetLoad", :description "Reset partition loads", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Partitions_Repair {:path "/Partitions/{partitionId}/$/Recover", :description "Repair partitions", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedReplicas_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetReplicas", :description "Get deployed replicas", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceGroupMembers_Get {:path "/Applications/{applicationName}/$/GetServices/{serviceName}/$/GetServiceGroupMembers", :description "Get service group members", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceHealths_Send {:path "/Services/{serviceName}/$/ReportHealth", :description "Send service healths", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The report of the service health", :in "body", :name "serviceHealthReport", :required true, :schema #:reference{:definitions "ServiceHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :PartitionLoadInformations_Get {:path "/Partitions/{partitionId}/$/GetLoadInformation", :description "Get partition load informations", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Replicas_List {:path "/Partitions/{partitionId}/$/GetReplicas", :description "List replicas", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :NodeLoadInformations_Get {:path "/Nodes/{nodeName}/$/GetLoadInformation", :description "Get node load informations", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ClusterManifests_Get {:path "/$/GetClusterManifest", :description "Get cluster manifests", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :DeployedServicePackageHealths_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages/{servicePackageName}/$/GetHealth", :description "Get deployed service package healths", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service package", :in "path", :name "servicePackageName", :required true, :type "string"} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationUpgrades_Update {:path "/Applications/{applicationName}/$/UpdateUpgrade", :description "Update application upgrades", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the update application upgrade", :in "body", :name "updateApplicationUpgrade", :required true, :schema #:reference{:definitions "UpdateApplicationUpgrade"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedServicePackages_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetServicePackages", :description "Get deployed service packages", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Services_Remove {:path "/Services/{serviceName}/$/Delete", :description "Remove services", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Nodes_List {:path "/Nodes", :description "List nodes", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"} {:description "The token of the continuation", :in "query", :name "continuation-token", :required false, :type "string"}], :verb :get}, :DeployedCodePackages_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/GetCodePackages", :description "Get deployed code packages", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceManifests_Get {:path "/ApplicationTypes/{applicationTypeName}/$/GetServiceManifest", :description "Get service manifests", :parameters [{:description "The name of the application type", :in "path", :name "applicationTypeName", :required true, :type "string"} {:description "The version of the application type", :in "query", :name "ApplicationTypeVersion", :required true, :type "string"} {:description "The name of the service manifest", :in "query", :name "ServiceManifestName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :DeployedApplicationHealths_Send {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}/$/ReportHealth", :description "Send deployed application health", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The report of the deployed application health", :in "body", :name "deployedApplicationHealthReport", :required true, :schema #:reference{:definitions "DeployedApplicationHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ServiceGroups_Remove {:path "/Applications/{applicationName}/$/GetServiceGroups/{serviceName}/$/Delete", :description "Remove service groups", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :DeployedApplications_Get {:path "/Nodes/{nodeName}/$/GetApplications/{applicationName}", :description "Get deployed applications", :parameters [{:description "The name of the node", :in "path", :name "nodeName", :required true, :type "string"} {:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Applications_List {:path "/Applications", :description "List applications", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"} {:description "The token of the continuation", :in "query", :name "continuation-token", :required false, :type "string"}], :verb :get}, :PartitionHealths_Get {:path "/Partitions/{partitionId}/$/GetHealth", :description "Get partition healths", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} {:description "The filter of the replicas health state", :in "query", :name "ReplicasHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceGroups_Update {:path "/Applications/{applicationName}/$/GetServices/{serviceName}/$/UpdateServiceGroup", :description "Update service groups", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the service group update", :in "body", :name "updateServiceGroupDescription", :required true, :schema #:reference{:definitions "UpdateServiceGroupDescription"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :UpgradeProgresses_Get {:path "/$/GetUpgradeProgress", :description "Get upgrade progresses", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ClusterPackages_Register {:path "/$/Provision", :description "Register cluster packages", :parameters [{:description "The package of the register cluster", :in "body", :name "registerClusterPackage", :required true, :schema #:reference{:definitions "RegisterClusterPackage"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :Partitions_Get {:path "/Services/{serviceName}/$/GetPartitions/{partitionId}", :description "Get partitions", :parameters [{:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ClusterLoadInformations_Get {:path "/$/GetLoadInformation", :description "Get cluster load informations", :parameters [#:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ServiceGroups_Create {:path "/Applications/{applicationName}/$/GetServices/$/CreateServiceGroup", :description "Create service groups", :parameters [{:description "The name of the service group", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The description of the service group", :in "body", :name "createServiceGroupDescription", :required true, :schema #:reference{:definitions "CreateServiceGroupDescription"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ServiceTypes_Get {:path "/ApplicationTypes/{applicationTypeName}/$/GetServiceTypes", :description "Get service types", :parameters [{:description "The name of the application type", :in "path", :name "applicationTypeName", :required true, :type "string"} {:description "The version of the application type", :in "query", :name "ApplicationTypeVersion", :required true, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :Services_Get {:path "/Applications/{applicationName}/$/GetServices/{serviceName}", :description "Get services", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The name of the service", :in "path", :name "serviceName", :required true, :type "string", :x-ms-skip-url-encoding true} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}, :ApplicationHealths_Send {:path "/Applications/{applicationName}/$/ReportHealth", :description "Send application health", :parameters [{:description "The name of the application", :in "path", :name "applicationName", :required true, :type "string", :x-ms-skip-url-encoding true} {:description "The report of the application health", :in "body", :name "applicationHealthReport", :required true, :schema #:reference{:definitions "ApplicationHealthReport"}} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :post}, :ReplicaHealths_Get {:path "/Partitions/{partitionId}/$/GetReplicas/{replicaId}/$/GetHealth", :description "Get replica healths", :parameters [{:description "The id of the partition", :in "path", :name "partitionId", :required true, :type "string"} {:description "The id of the replica", :in "path", :name "replicaId", :required true, :type "string"} {:description "The filter of the events health state", :in "query", :name "EventsHealthStateFilter", :required false, :type "string"} #:reference{:parameters "timeout"} #:reference{:parameters "api-version"}], :verb :get}}, :parameters {:api-version {:description "The version of the api", :in "query", :name "api-version", :required true, :type "string"}, :timeout {:description "The timeout in seconds", :in "query", :name "timeout", :required false, :type "integer", :x-ms-parameter-location "client"}}, :definitions {:ReplicaHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the replica health", :properties {:PartitionId {:type "string"}, :ReplicaOrInstanceId {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Replica"}, :PartitionScheme {:enum ["Invalid" "Singleton" "UniformInt64" "Named"], :type "string"}, :DeployedServicePackageHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the deployed service package health", :properties {:ApplicationName {:type "string"}, :NodeName {:type "string"}, :ServiceManifestName {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "DeployedServicePackage"}, :Service {:description "The service", :properties {:ManifestVersion {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :Id {:type "string"}, :TypeName {:type "string"}, :ServiceStatus {:enum ["Invalid" "Active" "Upgrading" "Deleting" "Creating" "Faile"], :type "string"}, :IsServiceGroup {:type "boolean"}, :HealthState #:reference{:definitions "HealthState"}, :Name {:type "string"}, :HasPersistedState {:type "boolean"}}, :type "object"}, :PartitionsHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the partitions health", :properties {:MaxPercentUnhealthyPartitionsPerService {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Partitions"}, :StatelessServiceDescription {:allOf [#:reference{:definitions "ServiceDescription"}], :description "The description of the stateless service", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :HealthEvent {:description "The event of the health", :properties {:Property {:type "string"}, :LastModifiedUtcTimestamp {:type "string"}, :SourceUtcTimestamp {:type "string"}, :LastOkTransitionAt {:type "string"}, :SourceId {:type "string"}, :TimeToLiveInMilliSeconds {:type "string"}, :HealthState #:reference{:definitions "HealthState"}, :LastErrorTransitionAt {:type "string"}, :LastWarningTransitionAt {:type "string"}, :RemoveWhenExpired {:type "boolean"}, :SequenceNumber {:type "string"}, :IsExpired {:type "boolean"}, :Description {:type "string"}}, :type "object"}, :StatelessCreateServiceGroupDescription {:allOf [#:reference{:definitions "CreateServiceGroupDescription"}], :description "The description of the stateless create service group", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :RegisterClusterPackage {:description "The package of the register cluster", :properties {:ClusterManifestFilePath {:description "The relative path of the cluster manifest file", :type "string"}, :CodeFilePath {:description "The path of the code file", :type "string"}}, :type "object"}, :ApplicationManifest {:description "The manifest of the application", :properties {:Manifest {:type "string"}}, :type "object"}, :ServiceHealth {:description "The health of the service", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :Name {:type "string"}, :PartitionHealthStates {:items {:description "The states of the partition health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :PartitionId {:type "string"}}, :type "object"}, :type "array"}}, :type "object"}, :UnregisterClusterPackage {:description "The package of the unregister cluster", :properties {:CodeVersion {:description "The version of the code", :type "string"}, :ConfigVersion {:description "The version of the config", :type "string"}}, :type "object"}, :PartitionLoadInformation {:description "The information of the partition load", :properties {:PartitionId {:type "string"}, :PrimaryLoadMetricReports {:items {:type "string"}, :type "array"}, :SecondaryLoadMetricReports {:items {:type "string"}, :type "array"}}, :type "object"}, :ServiceDescription {:description "The description of the service", :discriminator "ServiceKind", :properties {:CorrelationScheme #:reference{:definitions "ServiceCorrelationDescription"}, :PlacementConstraints {:type "string"}, :ServiceTypeName {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :ApplicationName {:type "string"}, :Flags {:type "integer"}, :ServicePlacementPolicies #:reference{:definitions "ServiceCorrelationDescription"}, :PartitionDescription #:reference{:definitions "PartitionDescription"}, :ServiceLoadMetrics #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceName {:type "string"}}, :required ["ServiceKind"], :type "object"}, :UnregisterApplicationType {:description "The type of the unregister application", :properties {:ApplicationTypeVersion {:type "string"}}, :type "object"}, :DeployedReplicaDetail {:description "The detail of the deployed replica", :properties {:ReplicaId {:type "string"}, :PartitionId {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :CurrentServiceOperationStartTimeUtc {:type "string"}, :InstanceId {:type "string"}, :ReadStatus {:type "integer"}, :CurrentReplicatorOperation {:type "integer"}, :CurrentServiceOperation {:type "integer"}, :ReplicatorStatus {:description "The status of the replicator", :properties {:Kind {:type "integer"}, :ReplicationQueueStatus {:description "The status of the replication queue", :properties {:CommittedSequenceNumber {:type "string"}, :CompletedSequenceNumber {:type "string"}, :FirstSequenceNumber {:type "string"}, :LastSequenceNumber {:type "string"}, :QueueMemorySize {:type "string"}, :QueueUtilizationPercentage {:type "string"}}, :type "object"}}, :type "object"}, :WriteStatus {:type "integer"}, :ServiceName {:type "string"}}, :type "object"}, :ServiceKind {:enum ["Invalid" "Stateless" "Stateful"], :type "string"}, :ApplicationType {:description "The type of the application", :properties {:DefaultParameterList {:items {:description "The list of the default parameter", :properties {:Key {:type "string"}, :Value {:type "string"}}, :type "object"}, :type "array"}, :Name {:type "string"}, :Version {:type "string"}}, :type "object"}, :NodeHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the node health", :type "object"}, :EntryPoint {:description "The point of the entry", :properties {:CodePackageEntryPointStatistics #:reference{:definitions "CodePackageEntryPointStatistics"}, :EntryPointLocation {:type "integer"}, :NextActivationTime {:type "integer"}, :ProcessId {:type "integer"}, :RunAsUserName {:type "integer"}, :Status {:type "string"}}, :type "object"}, :ServicePlacementPolicyDescription {:description "The description of the service placement policy", :properties {:Type {:type "string"}}, :type "object"}, :ApplicationHealthPolicyMap {:description "The application health policy of the cluster", :properties {:ConsiderWarningAsError {:description "The boolean of the consider warning as error", :type "boolean"}, :DefaultServiceTypeHealthPolicy {:description "The policy of the default service type health", :type "integer"}, :MaxPercentUnhealthyDeployedApplications {:description "The max percent of the unhealthy deployed applications", :type "integer"}, :MaxPercentUnhealthyPartitionsPerService {:description "The max percent unhealthy partitions per service", :type "integer"}, :MaxPercentUnhealthyReplicasPerPartition {:description "The max percent unhealthy replicas per partition", :type "integer"}, :MaxPercentUnhealthyServices {:description "The policy of the default service type health", :type "integer"}}, :type "object"}, :DeployedCodePackage {:description "The package of the deployed code", :properties {:HasSetupEntryPoint {:type "boolean"}, :MainEntryPoint #:reference{:definitions "EntryPoint"}, :Name {:type "string"}, :RunFrequencyInterval {:type "string"}, :ServiceManifestName {:type "string"}, :SetupEntryPoint #:reference{:definitions "EntryPoint"}, :Status {:type "string"}, :Version {:type "string"}}, :type "object"}, :ServiceGroupDescription {:description "The description of the service group", :discriminator "ServiceKind", :properties {:CorrelationScheme #:reference{:definitions "ServiceCorrelationDescription"}, :PlacementConstraints {:type "string"}, :ServiceTypeName {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :ApplicationName {:type "string"}, :Flags {:type "integer"}, :ServicePlacementPolicies #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceGroupMemberDescription {:items #:reference{:definitions "ServiceGroupMemberDescription"}, :type "array"}, :PartitionDescription #:reference{:definitions "PartitionDescription"}, :ServiceLoadMetrics #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceName {:type "string"}}, :required ["ServiceKind"], :type "object"}, :ServiceLoadMetricDescription {:description "The description of the service load metric", :properties {:Name {:type "string"}, :PrimaryDefaultLoad {:type "integer"}, :SecondaryDefaultLoad {:type "integer"}, :ServiceLoadMetricWeight {:enum ["Zero" "Low" "Medium" "High"], :type "string"}}, :type "object"}, :ClusterLoadInformation {:description "The information of the cluster load", :properties {:LastBalancingEndTimeUtc {:type "string"}, :LastBalancingStartTimeUtc {:type "string"}, :LoadMetricInformation {:items #:reference{:definitions "LoadMetricInformation"}, :type "array"}}, :type "object"}, :ApplicationTypeHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the application type health", :properties {:ApplicationTypeName {:type "string"}, :MaxPercentUnhealthyApplications {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "ApplicationType"}, :PartitionHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the partition health", :properties {:PartitionId {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Partition"}, :DeployedApplicationsHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the deployed applications health", :properties {:MaxPercentUnhealthyDeployedApplications {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "DeployedApplications"}, :StatelessCreateServiceDescription {:allOf [#:reference{:definitions "CreateServiceDescription"}], :description "The description of the stateless create service", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :ResolvedServicePartition {:description "The partition of the resolved service", :properties {:Endpoints {:items {:description "The endpoints", :properties {:Address {:type "string"}, :Kind {:type "integer"}}, :type "object"}, :type "array"}, :Name {:type "string"}, :PartitionInformation #:reference{:definitions "PartitionInformation"}, :Version {:type "string"}}, :type "object"}, :UpgradeState {:enum ["Invalid" "RollingBackInProgress" "RollingBackCompleted" "RollingForwardPending" "RollingForwardInProgress" "RollingForwardCompleted"], :type "string"}, :PartitionHealth {:description "The health of the partition", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :PartitionId {:type "string"}, :ReplicaHealthStates {:items {:description "The states of the replica health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :HealthEvents {:type "integer"}, :PartitionId {:type "string"}, :ReplicaId {:type "string"}}, :type "object"}, :type "array"}}, :type "object"}, :StatefulServiceGroupDescription {:allOf [#:reference{:definitions "ServiceGroupDescription"}], :description "The description of the stateful service group", :properties {:DefaultMoveCost #:reference{:definitions "DefaultMoveCost"}, :HasPersistedState {:type "boolean"}, :IsDefaultMoveCostSpecified {:type "boolean"}, :MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationSeconds {:type "integer"}, :ReplicaRestartWaitDurationSeconds {:type "integer"}, :StandByReplicaKeepDurationSeconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :ApplicationHealth {:description "The health of the application", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :DeployedApplicationHealthStates {:items {:description "The states of the deployed application health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :ApplicationName {:type "string"}, :NodeName {:type "string"}}, :type "object"}, :type "array"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :Name {:type "string"}, :ServiceHealthStates {:items {:description "The states of the service health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :ServiceName {:type "string"}}, :type "object"}, :type "array"}, :UnhealthyEvaluations {:type "string"}}, :type "object"}, :StatefulUpdateServiceGroupDescription {:allOf [#:reference{:definitions "UpdateServiceGroupDescription"}], :description "The description of the stateful update service group", :properties {:MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationInMilliseconds {:type "integer"}, :ReplicaRestartWaitDurationInMilliseconds {:type "integer"}, :StandByReplicaKeepDurationInMilliseconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :ClusterHealth {:description "The health of the cluster", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :ApplicationHealthState {:items {:description "The state of the application health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :Name {:type "string"}}, :type "object"}, :type "array"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :NodeHealthStates {:items {:description "The states of tehe node health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :Id {:description "The id", :properties {:Id {:type "string"}}, :type "object"}, :Name {:type "string"}}, :type "object"}, :type "array"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object"}, :DeltaNodesCheckHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the delta nodes check health", :properties {:BaselineErrorCount {:type "integer"}, :BaselineTotalCount {:type "integer"}, :MaxPercentDeltaUnhealthyNodes {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "DeltaNodesCheck"}, :NodeList {:description "The list of the node", :properties {:ContinuationToken {:type "string"}, :Items {:items #:reference{:definitions "Node"}, :type "array"}}, :type "object"}, :ServiceList {:description "The list of the service", :properties {:ContinuationToken {:type "string"}, :Items {:items #:reference{:definitions "Service"}, :type "array"}}, :type "object"}, :UnhealthyEvaluation {:description "The evaluation of the unhealthy", :properties {:HealthEvaluation #:reference{:definitions "HealthEvaluation"}}, :type "object"}, :ClusterHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the cluster health", :type "object"}, :ReplicaLoadInformation {:description "The information of the replica load", :properties {:PartitionId {:type "string"}, :ReplicaOrInstanceId {:type "string"}, :ReportedLoad {:items {:type "string"}, :type "array"}}, :type "object"}, :ErrorModel {:description "The model of the error", :properties {:Error {:description "The error", :properties {:Code {:type "string"}, :Message {:type "string"}}, :type "object"}}, :type "object"}, :DeployedServicePackageHealthState {:description "The state of the deployed service package health", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :ApplicationName {:type "string"}, :NodeName {:type "string"}, :ServiceManifestName {:type "string"}}, :type "object"}, :RollingUpgradeMode {:enum ["Invalid" "UnmonitoredAuto" "UnmonitoredManual" "Monitored"], :type "string"}, :StatelessUpdateServiceDescription {:allOf [#:reference{:definitions "UpdateServiceDescription"}], :description "The description of the stateless update service", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :DeployedServicePackagesHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the deployed service packages health", :properties {:TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "DeployedServicePackages"}, :DeployedApplicationHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the deployed application health", :type "object"}, :ApplicationsHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the applications health", :properties {:MaxPercentUnhealthyApplications {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Applications"}, :ServiceHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the service health", :properties {:ServiceName {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Service"}, :ApplicationHealthPolicy {:description "The policy of the application health", :properties {:ConsiderWarningAsError {:type "boolean"}, :DefaultServiceTypeHealthPolicy {:description "The policy of the default service type health", :properties {:MaxPercentUnhealthyPartitionsPerService {:type "integer"}, :MaxPercentUnhealthyReplicasPerPartition {:type "integer"}, :MaxPercentUnhealthyServices {:type "integer"}}, :type "object"}, :MaxPercentUnhealthyDeployedApplications {:type "integer"}}, :type "object"}, :ServiceHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the service health", :type "object"}, :ReplicaList {:description "The list of the replica", :properties {:ContinuationToken {:type "string"}, :Items {:items #:reference{:definitions "Replica"}, :type "array"}}, :type "object"}, :UpdateDescription {:description "The description of the update", :properties {:ForceRestart {:description "The flag of the force restart", :type "boolean"}, :UpgradeTimeoutInMilliseconds {:description "The milliseconds of the upgrade timeout", :type "string"}, :UpgradeDomainTimeoutInMilliseconds {:description "The milliseconds of the upgrade domain timeout", :type "string"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :FailureAction {:description "The action of the failure", :type "string"}, :HealthCheckWaitDurationInMilliseconds {:description "The seconds of the health check wait duration", :type "string"}, :HealthCheckRetryTimeoutInMilliseconds {:description "The milliseconds of the health check retry timeout", :type "string"}, :UpgradeReplicaSetCheckTimeoutInSeconds {:description "The seconds of the upgrade replica set check timeout", :type "integer"}, :HealthCheckStableDurationInMilliseconds {:description "The seconds of the health check stable duration", :type "string"}}, :type "object"}, :ApplicationList {:description "The list of the application", :properties {:ContinuationToken {:type "string"}, :Items {:items #:reference{:definitions "Application"}, :type "array"}}, :type "object"}, :ReplicaStatus {:enum ["Invalid" "InBuild" "Standby" "Ready" "Down" "Dropped"], :type "string"}, :EventHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the event health", :properties {:ConsiderWarningAsError {:type "boolean"}, :UnhealthyEvent #:reference{:definitions "HealthEvent"}}, :type "object", :x-ms-discriminator-value "Event"}, :DeployedServiceType {:description "The type of the deploye service", :properties {:CodePackageName {:type "string"}, :ServiceManifestName {:type "string"}, :ServiceTypeName {:type "string"}, :Status {:type "string"}}, :type "object"}, :DisableNode {:description "The node", :properties {:DeactivationIntent {:enum ["Pause" "Restart" "RemoveData" "RemoveNode"], :type "string"}}, :type "object"}, :HealthReport {:description "The report of the health", :properties {:Description {:type "string"}, :HealthState #:reference{:definitions "HealthState"}, :Property {:type "string"}, :RemoveWhenExpired {:type "boolean"}, :SequenceNumber {:type "string"}, :SourceId {:type "string"}, :TimeToLiveInMilliSeconds {:type "string"}}, :type "object"}, :DeployedServicePackageHealth {:description "The health of the deployed service package", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :ApplicationName {:type "string"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :NodeName {:type "string"}, :ServiceManifestName {:type "string"}}, :type "object"}, :StatefulCreateServiceGroupDescription {:allOf [#:reference{:definitions "CreateServiceGroupDescription"}], :description "The description of the stateful create service group", :properties {:DefaultMoveCost #:reference{:definitions "DefaultMoveCost"}, :HasPersistedState {:type "boolean"}, :IsDefaultMoveCostSpecified {:type "boolean"}, :MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationSeconds {:type "integer"}, :ReplicaRestartWaitDurationSeconds {:type "integer"}, :StandByReplicaKeepDurationSeconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :DeployedServiceHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the deployed service package health", :type "object"}, :StatelessServiceGroupDescription {:allOf [#:reference{:definitions "ServiceGroupDescription"}], :description "The description of the stateless service group", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :ReplicasHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the replicas health", :properties {:MaxPercentUnhealthyPartitionsPerService {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Replicas"}, :StatefulServiceDescription {:allOf [#:reference{:definitions "ServiceDescription"}], :description "The description of the stateful service", :properties {:DefaultMoveCost #:reference{:definitions "DefaultMoveCost"}, :HasPersistedState {:type "boolean"}, :IsDefaultMoveCostSpecified {:type "boolean"}, :MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationSeconds {:type "integer"}, :ReplicaRestartWaitDurationSeconds {:type "integer"}, :StandByReplicaKeepDurationSeconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :NodeHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the node health", :properties {:NodeName {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Node"}, :DeployedApplicationHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the deployed application health", :properties {:ApplicationName {:type "string"}, :NodeName {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "DeployedApplication"}, :DefaultMoveCost {:enum ["Zero" "Low" "Medium" "High"], :type "string"}, :UpgradeDomainDeployedApplicationsHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the upgrade domain deployed applications health", :properties {:MaxPercentUnhealthyDeployedApplications {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}, :UpgradeDomainName {:type "string"}}, :type "object", :x-ms-discriminator-value "UpgradeDomainDeployedApplications"}, :HealthEvaluation {:description "The evauation of the health", :discriminator "Kind", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :Description {:type "string"}, :Kind {:enum ["Invalid" "Event" "Replicas" "Partitions" "DeployedServicePackages" "DeployedApplications" "Services" "Nodes" "Applications" "SystemApplication" "UpgradeDomainDeployedApplications" "UpgradeDomainNodes" "Node" "Replica" "Partition" "Service" "DeployedServicePackage" "DeployedApplication" "Application" "DeltaNodesCheck" "UpgradeDomainDeltaNodesCheck" "ApplicationTypeApplications"], :type "string"}}, :required ["Kind"], :type "object"}, :NodeLoadInformation {:description "The information of the node load", :properties {:NodeLoadMetricInformation #:reference{:definitions "NodeLoadMetricInformation"}, :NodeName {:type "string"}}, :type "object"}, :CodePackageEntryPointStatistics {:description "The statistics of the code package entry point", :properties {:LastSuccessfulExitTime {:type "string"}, :LastExitCode {:type "integer"}, :ContinuousExitFailureCount {:type "integer"}, :ActivationCount {:type "integer"}, :ActivationFailureCount {:type "integer"}, :LastSuccessfulActivationTime {:type "string"}, :LastExitTime {:type "string"}, :ExitCount {:type "integer"}, :ExitFailureCount {:type "integer"}, :LastActivationTime {:type "string"}, :ContinuousActivationFailureCount {:type "integer"}}, :type "object"}, :ServicesHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the services health", :properties {:MaxPercentUnhealthyServices {:type "integer"}, :ServiceTypeName {:type "string"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Services"}, :PartitionHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the partition health", :type "object"}, :UpdateApplicationUpgrade {:description "The description of the update application upgrade", :properties {:ApplicationHealthPolicy #:reference{:definitions "ApplicationHealthPolicy"}, :Name {:type "string"}, :UpdateDescription #:reference{:definitions "UpdateDescription"}, :UpgradeKind {:type "string"}}, :type "object"}, :HealthState {:enum ["Invalid" "Ok" "Warning" "Error" "Unknown"], :type "string"}, :NodeHealth {:description "The health of the node", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :Name {:type "string"}}, :type "object"}, :ClusterUpgradeHealthPolicy {:description "The upgrade health policy of the cluster", :properties {:MaxPercentDeltaUnhealthyNodes {:description "The max percent of the delta unhealthy nodes, values are [0-100]", :type "integer"}, :MaxPercentUpgradeDomainDeltaUnhealthyNodes {:description "The max percent of the upgrade domain delta unhealthy nodes, values are [0-100]", :type "integer"}}, :type "object"}, :ServiceGroupMember {:description "The member of the service group", :properties {:Name {:type "string"}, :ServiceGroupMemberDescription {:items #:reference{:definitions "ServiceGroupMemberDescription"}, :type "array"}}, :type "object"}, :CreateServiceDescription {:description "The description of the create service", :discriminator "ServiceKind", :properties {:CorrelationScheme #:reference{:definitions "ServiceCorrelationDescription"}, :PlacementConstraints {:type "string"}, :ServiceTypeName {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :ApplicationName {:type "string"}, :Flags {:type "integer"}, :ServicePlacementPolicies #:reference{:definitions "ServiceCorrelationDescription"}, :PartitionDescription #:reference{:definitions "PartitionDescription"}, :ServiceLoadMetrics #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceName {:type "string"}}, :required ["ServiceKind"], :type "object"}, :StartApplicationUpgrade {:description "The description of the start application upgrade", :properties {:ForceRestart {:type "boolean"}, :Parameters {:items {:description "The parameters", :properties {:Key {:type "string"}, :Value {:type "string"}}, :type "object"}, :type "array"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :ApplicationHealthPolicy #:reference{:definitions "ApplicationHealthPolicy"}, :TargetApplicationTypeVersion {:type "string"}, :MonitoringPolicy #:reference{:definitions "MonitoringPolicy"}, :Name {:type "string"}, :UpgradeKind {:enum ["Invalid" "Rolling"], :type "string"}, :UpgradeReplicaSetCheckTimeoutInSeconds {:type "integer"}}, :type "object"}, :ApplicationHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the application health", :properties {:ServiceName {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Application"}, :FailureAction {:enum ["Invalid" "Rollback" "Manual"], :type "string"}, :ReplicaHealth {:description "The health of the replica", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :PartitionId {:type "string"}, :ReplicaId {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}}, :type "object"}, :LoadMetricInformation {:description "The information of the load metric", :properties {:RemainingBufferedCapacity {:type "string"}, :ClusterCapacity {:type "string"}, :IsClusterCapacityViolation {:type "boolean"}, :MaxNodeLoadValue {:type "string"}, :IsBalancedBefore {:type "boolean"}, :RemainingUnbufferedCapacity {:type "string"}, :DeviationBefore {:type "integer"}, :MinNodeLoadId {:description "The id of the min node", :properties {:Id {:type "string"}}, :type "object"}, :ClusterLoad {:type "string"}, :Action {:type "string"}, :Name {:type "string"}, :MinNodeLoadValue {:type "string"}, :BufferedCapacity {:type "string"}, :BalancingThreshold {:type "integer"}, :DeviationAfter {:type "integer"}, :NodeBufferPercentage {:type "integer"}, :IsBalancedAfter {:type "boolean"}, :MaxNodeLoadId {:description "The id of the max node load", :properties {:Id {:type "string"}}, :type "object"}, :ActivityThreshold {:type "integer"}}, :type "object"}, :ResumeApplicationUpgrade {:description "The upgrade of the resume application", :properties {:UpgradeDomainName {:type "string"}}, :type "object"}, :RegisterApplicationType {:description "The type of the register application", :properties {:ApplicationTypeBuildPath {:type "string"}}, :type "object"}, :MonitoringPolicy {:description "The policy of the monitoring", :properties {:FailureAction {:type "string"}, :HealthCheckRetryTimeoutInMilliseconds {:type "string"}, :HealthCheckStableDurationInMilliseconds {:type "string"}, :HealthCheckWaitDurationInMilliseconds {:type "string"}, :UpgradeDomainTimeoutInMilliseconds {:type "string"}, :UpgradeTimeoutInMilliseconds {:type "string"}}, :type "object"}, :ClusterHealthPolicy {:description "The policy of the cluster health", :properties {:ForceRestart {:description "The flag of the force restart", :type "boolean"}, :UpgradeTimeoutInMilliseconds {:description "The milliseconds of the upgrade timeout", :type "string"}, :UpgradeDomainTimeoutInMilliseconds {:description "The milliseconds of the upgrade domain timeout", :type "string"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :FailureAction {:description "The action of the failure", :type "string"}, :HealthCheckWaitDurationInMilliseconds {:description "The milliseconds of the health check wait duration", :type "string"}, :HealthCheckRetryTimeoutInMilliseconds {:description "The milliseconds of the health check retry timeout", :type "string"}, :UpgradeReplicaSetCheckTimeoutInSeconds {:description "The seconds of the upgrade replica set check timeout", :type "integer"}, :HealthCheckStableDurationInMilliseconds {:description "The milliseconds of the health check stable duration", :type "string"}}, :type "object"}, :ApplicationUpgrade {:description "The upgrade of the application", :properties {:UpgradeDomainDurationInMilliseconds {:type "string"}, :NextUpgradeDomain {:type "string"}, :FailureTimestampUtc {:type "string"}, :UnhealthyEvaluations {:type "string"}, :UpgradeDomains {:type "string"}, :UpgradeState #:reference{:definitions "UpgradeState"}, :TypeName {:type "string"}, :DeployedApplicationHealthStates {:description "The states of the deployed application health", :properties {:DomainName {:type "string"}, :NodeUpgradeProgressList {:type "string"}}, :type "object"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :UpgradeDurationInMilliseconds {:type "string"}, :TargetApplicationTypeVersion {:type "string"}, :StartTimestampUtc {:type "string"}, :Name {:type "string"}, :FailureReason #:reference{:definitions "FailureReason"}, :CurrentUpgradeDomainProgress {:description "The progress of the current upgrade domain", :properties {:DomainName {:type "string"}, :NodeUpgradeProgressList {:type "string"}}, :type "object"}}, :type "object"}, :DeployedApplication {:description "The application of the deployed", :properties {:Id {:type "string"}, :LogDirectory {:type "string"}, :Name {:type "string"}, :Status {:type "string"}, :TempDirectory {:type "string"}, :TypeName {:type "string"}, :WorkDirectory {:type "string"}}, :type "object"}, :ResumeClusterUpgrade {:description "The upgrade of the resume cluster", :properties {:UpgradeDomain {:type "string"}}, :type "object"}, :UpgradeDomainNodesHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the upgrade domain nodes health", :properties {:MaxPercentUnhealthyNodes {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}, :UpgradeDomainName {:type "string"}}, :type "object", :x-ms-discriminator-value "UpgradeDomainNodes"}, :ServiceGroupMemberDescription {:description "The description of the service group member", :properties {:ServiceKind #:reference{:definitions "ServiceKind"}, :ServiceName {:type "string"}, :ServiceTypeName {:type "string"}}, :type "object"}, :Application {:description "The application", :properties {:HealthState #:reference{:definitions "HealthState"}, :Id {:type "string"}, :Name {:type "string"}, :Parameters {:items {:description "The parameters", :properties {:Key {:type "string"}, :Value {:type "string"}}, :type "object"}, :type "array"}, :Status {:type "string"}, :TypeName {:type "string"}, :TypeVersion {:type "string"}}, :type "object"}, :ReplicaHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the replica health", :type "object"}, :UpdateServiceGroupDescription {:description "The description of the update service group", :discriminator "ServiceKind", :properties {:Flags {:type "integer"}, :ServiceKind #:reference{:definitions "ServiceKind"}}, :required ["ServiceKind"], :type "object"}, :PartitionInformation {:description "The information of the partition", :properties {:HighKey {:type "string"}, :Id {:type "string"}, :LowKey {:type "string"}, :Name {:items {:type "string"}, :type "array"}, :ServicePartitionKind {:enum ["Invalid" "Singleton" "Int64Range" "Named"], :type "string"}}, :type "object"}, :PartitionList {:description "The list of the partition", :properties {:ContinuationToken {:type "string"}, :Items {:items #:reference{:definitions "Partition"}, :type "array"}}, :type "object"}, :Node {:description "The node", :properties {:NodeDeactivationInfo {:description "The info of the deactivation info", :properties {:NodeDeactivationIntent {:enum ["Invalid" "Pause" "Restart" "RemoveData"], :type "string"}, :NodeDeactivationStatus {:enum ["Invalid" "SafetyCheckInProgress" "SafetyCheckComplete" "Completed"], :type "string"}}, :type "object"}, :CodeVersion {:type "string"}, :Id {:description "The id", :properties {:Id {:type "string"}}, :type "object"}, :InstanceId {:type "string"}, :UpgradeDomain {:type "string"}, :NodeUpTimeInSeconds {:type "string"}, :ConfigVersion {:type "string"}, :IpAddressOrFQDN {:type "string"}, :FaultDomain {:type "string"}, :HealthState #:reference{:definitions "HealthState"}, :NodeStatus {:enum ["Invalid" "Up" "Down" "Enabling" "Disabling" "Disabled" "Unknown" "Removed"], :type "string"}, :Name {:type "string"}, :Type {:type "string"}, :IsSeedNode {:type "boolean"}}, :type "object"}, :StatefulCreateServiceDescription {:allOf [#:reference{:definitions "CreateServiceDescription"}], :description "The description of the stateful create service", :properties {:DefaultMoveCost #:reference{:definitions "DefaultMoveCost"}, :HasPersistedState {:type "boolean"}, :IsDefaultMoveCostSpecified {:type "boolean"}, :MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationSeconds {:type "integer"}, :ReplicaRestartWaitDurationSeconds {:type "integer"}, :StandByReplicaKeepDurationSeconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :ServiceManifest {:description "The manifest of the service", :properties {:Manifest {:type "string"}}, :type "object"}, :CreateServiceGroupDescription {:description "The description of the create service group", :discriminator "ServiceKind", :properties {:CorrelationScheme #:reference{:definitions "ServiceCorrelationDescription"}, :PlacementConstraints {:type "string"}, :ServiceTypeName {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :ApplicationName {:type "string"}, :Flags {:type "integer"}, :ServicePlacementPolicies #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceGroupMemberDescription {:items #:reference{:definitions "ServiceGroupMemberDescription"}, :type "array"}, :PartitionDescription #:reference{:definitions "PartitionDescription"}, :ServiceLoadMetrics #:reference{:definitions "ServiceCorrelationDescription"}, :ServiceName {:type "string"}}, :required ["ServiceKind"], :type "object"}, :NodesHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the nodes health", :properties {:MaxPercentUnhealthyNodes {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "Nodes"}, :PartitionDescription {:description "The description of the partition", :properties {:Count {:type "integer"}, :HighKey {:type "string"}, :LowKey {:type "string"}, :Names {:items {:type "string"}, :type "array"}, :PartitionScheme #:reference{:definitions "PartitionScheme"}}, :type "object"}, :ServiceCorrelationDescription {:description "The description of the service correlation", :properties {:ServiceCorrelationScheme {:enum ["Invalid" "Affinity" "AlignedAffinity" "NonAlignedAffinity"], :type "string"}, :ServiceName {:type "string"}}, :type "object"}, :UpdateServiceDescription {:description "The description of the update service", :discriminator "ServiceKind", :properties {:Flags {:type "integer"}, :ServiceKind #:reference{:definitions "ServiceKind"}}, :required ["ServiceKind"], :type "object"}, :ServiceDescriptionTemplate {:description "The template of the service description", :properties {:ServiceName {:type "string"}, :ServiceTypeName {:type "string"}}, :type "object"}, :SystemApplicationHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the system application health", :properties {:UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}}, :type "object", :x-ms-discriminator-value "SystemApplication"}, :ApplicationDescription {:description "The description of the application", :properties {:Name {:type "string"}, :ParameterList {:items {:description "The list of the parameter", :properties {:Key {:type "string"}, :Value {:type "string"}}, :type "object"}, :type "array"}, :TypeName {:type "string"}, :TypeVersion {:type "string"}}, :type "object"}, :Partition {:description "The partition", :properties {:CurrentConfigurationEpoch {:description "The epoch of the current configuration", :properties {:ConfigurationVersion {:type "string"}, :DataLossVersion {:type "string"}}, :type "object"}, :HealthState #:reference{:definitions "HealthState"}, :InstanceCount {:type "integer"}, :MinReplicaSetSize {:type "integer"}, :PartitionInformation #:reference{:definitions "PartitionInformation"}, :PartitionStatus {:enum ["Invalid" "Ready" "NotReady" "InQuorumLoss" "Reconfiguring" "Deleting"], :type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :TargetReplicaSetSize {:type "integer"}}, :type "object"}, :ReplicaRole {:enum ["Invalid" "None" "Primary" "IdleSecondary" "ActiveSecondary"], :type "string"}, :UpdateClusterUpgrade {:description "The description of the update cluster upgrade", :properties {:ClusterHealthPolicy #:reference{:definitions "ClusterHealthPolicy"}, :EnableDeltaHealthEvaluations {:description "The evaluations of the enable delta health", :type "boolean"}, :UpdateDescription #:reference{:definitions "UpdateDescription"}, :UpgradeKind {:description "The kind of the upgrade", :type "string"}}, :type "object"}, :FailureReason {:enum ["Invalid" "Interrupted" "HealthCheck" "UpgradeDomainTimeout" "OverallUpgradeTimeout"], :type "string"}, :UpgradeDomainDeltaNodesCheckHealthEvaluation {:allOf [#:reference{:definitions "HealthEvaluation"}], :description "The evaluation of the upgrade domain delta nodes check health", :properties {:BaselineErrorCount {:type "integer"}, :BaselineTotalCount {:type "integer"}, :MaxPercentUpgradeDomainDeltaUnhealthyNodes {:type "integer"}, :TotalCount {:type "integer"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}, :UpgradeDomainName {:type "string"}}, :type "object", :x-ms-discriminator-value "UpgradeDomainDeltaNodesCheck"}, :ClusterUpgradeProgress {:description "The progress of the cluster upgrade", :properties {:CodeVersion {:type "string"}, :UpgradeDomainDurationInMilliseconds {:type "string"}, :NextUpgradeDomain {:type "string"}, :FailureTimestampUtc {:type "string"}, :UnhealthyEvaluations {:items #:reference{:definitions "UnhealthyEvaluation"}, :type "array"}, :UpgradeDomains {:items {:type "string"}, :type "array"}, :UpgradeState #:reference{:definitions "UpgradeState"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :ConfigVersion {:type "string"}, :UpgradeDomainProgressAtFailure {:description "The failure of the upgrade domain progress at", :properties {:DomainName {:type "string"}, :NodeUpgradeProgressList {:type "string"}}, :type "object"}, :UpgradeDurationInMilliseconds {:type "string"}, :StartTimestampUtc {:type "string"}, :FailureReason #:reference{:definitions "FailureReason"}, :CurrentUpgradeDomainProgress {:description "The progress of the current upgrade domain", :properties {:DomainName {:type "string"}, :NodeUpgradeProgressList {:type "string"}}, :type "object"}}, :type "object"}, :DeployedReplica {:description "The replica of the deployed", :properties {:ReplicaId {:type "string"}, :PartitionId {:type "string"}, :ServiceTypeName {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :ServiceManifestName {:type "string"}, :InstanceId {:type "string"}, :Address {:type "string"}, :ReplicaStatus #:reference{:definitions "ReplicaStatus"}, :CodePackageName {:type "string"}, :ServiceManifestVersion {:type "string"}, :ReplicaRole #:reference{:definitions "ReplicaRole"}, :ServiceName {:type "string"}}, :type "object"}, :StatelessUpdateServiceGroupDescription {:allOf [#:reference{:definitions "UpdateServiceGroupDescription"}], :description "The description of the stateless update service group", :properties {:InstanceCount {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateless"}, :NodeLoadMetricInformation {:description "The information of the node load metric", :properties {:IsCapacityViolation {:type "boolean"}, :Name {:type "string"}, :NodeBufferedCapacity {:type "string"}, :NodeCapacity {:type "string"}, :NodeLoad {:type "string"}, :NodeRemainingBufferedCapacity {:type "string"}, :NodeRemainingCapacity {:type "string"}}, :type "object"}, :StatefulUpdateServiceDescription {:allOf [#:reference{:definitions "UpdateServiceDescription"}], :description "The description of the stateful update service", :properties {:MinReplicaSetSize {:type "integer"}, :QuorumLossWaitDurationInMilliseconds {:type "integer"}, :ReplicaRestartWaitDurationInMilliseconds {:type "integer"}, :StandByReplicaKeepDurationInMilliseconds {:type "integer"}, :TargetReplicaSetSize {:type "integer"}}, :type "object", :x-ms-discriminator-value "Stateful"}, :ApplicationHealthReport {:allOf [#:reference{:definitions "HealthReport"}], :description "The report of the application health", :type "object"}, :DeployedApplicationHealth {:description "The health of the deployed application", :properties {:AggregatedHealthState #:reference{:definitions "HealthState"}, :DeployedServicePackageHealthStates #:reference{:definitions "DeployedServicePackageHealthState"}, :HealthEvents {:items #:reference{:definitions "HealthEvent"}, :type "array"}, :Name {:type "string"}, :NodeName {:type "string"}, :UnhealthyEvaluations {:type "string"}}, :type "object"}, :StartClusterUpgrade {:description "The description of the start cluster upgrade", :properties {:ForceRestart {:description "The flag of the force restart", :type "boolean"}, :CodeVersion {:description "The version of the code", :type "string"}, :ApplicationHealthPolicyMap #:reference{:definitions "ApplicationHealthPolicyMap"}, :RollingUpgradeMode #:reference{:definitions "RollingUpgradeMode"}, :ConfigVersion {:description "The version of the config", :type "string"}, :ClusterUpgradeHealthPolicy #:reference{:definitions "ClusterUpgradeHealthPolicy"}, :MonitoringPolicy {:description "The policy of the monitoring", :type "object"}, :UpgradeKind {:description "The kind of the upgrade", :type "string"}, :EnableDeltaHealthEvaluation {:description "The evaluation of the enable delta health", :type "boolean"}, :UpgradeReplicaSetCheckTimeoutInSeconds {:description "The seconds of the upgrade replica set check timeout", :type "integer"}}, :type "object"}, :DeployedServicePackage {:description "The package of the deployed service", :properties {:Name {:type "string"}, :Status {:type "string"}, :Version {:type "string"}}, :type "object"}, :ServiceType {:description "The type of the service", :properties {:IsServiceGroup {:type "boolean"}, :ServiceManifestName {:type "string"}, :ServiceManifestVersion {:type "string"}, :ServiceTypeDescription {:description "The description of the service type", :properties {:HasPersistedState {:type "boolean"}, :IsStateful {:type "boolean"}, :PlacementConstraints {:type "string"}, :ServiceTypeName {:type "string"}}, :type "object"}}, :type "object"}, :Replica {:description "The replica", :properties {:NodeName {:type "string"}, :LastInBuildDurationInSeconds {:type "string"}, :ReplicaId {:type "string"}, :ServiceKind #:reference{:definitions "ServiceKind"}, :InstanceId {:type "string"}, :Address {:type "string"}, :ReplicaStatus #:reference{:definitions "ReplicaStatus"}, :HealthState #:reference{:definitions "HealthState"}, :ReplicaRole #:reference{:definitions "ReplicaRole"}}, :type "object"}}}