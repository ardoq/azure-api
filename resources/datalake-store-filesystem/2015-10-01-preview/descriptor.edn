{:scheme "https", :host "azure.local", :info {:description "Creates an Azure Data Lake Store filesystem client.", :title "DataLakeStoreFileSystemManagementClient", :version "2015-10-01-preview"}, :ops {:FileSystem_ConcurrentAppend {:path "/WebHdfsExt/{filePath}", :description "Appends to the specified file. This method supports multiple concurrent appends to the file. NOTE: ConcurrentAppend and normal (serial) Append CANNOT be used interchangeably; once a file has been appended to using either of these append options, it can only be appended to using that append option. ConcurrentAppend DOES NOT guarantee order and can result in duplicated data landing in the target file. In order to close a file after using ConcurrentAppend, call the Flush method.", :parameters [{:description "The Data Lake Store path (starting with '/') of the file to which to append using concurrent append.", :in "path", :name "filePath", :required true, :type "string"} {:description "The file contents to include when appending to the file.  The maximum content size is 4MB.  For content larger than 4MB you must append the content in 4MB chunks.", :in "body", :name "streamContents", :required true, :schema {:format "file", :type "object"}} {:description "Indicates the concurrent append call should create the file if it doesn't exist or just open the existing file for append", :enum ["autocreate"], :in "query", :name "appendMode", :required false, :type "string", :x-ms-enum {:modelAsString false, :name "AppendModeType"}} {:description "The constant value for the operation.", :enum ["CONCURRENTAPPEND"], :in "query", :name "op", :required true, :type "string"} {:description "Indicates the data being sent to the server is being streamed in chunks.", :enum ["chunked"], :in "header", :name "Transfer-Encoding", :required true, :type "string"} #:reference{:parameters "ApiVersionParameter"}], :verb :post}, :FileSystem_SetFileExpiry {:path "/WebHdfsExt/{filePath}", :description "Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported.", :parameters [{:description "The Data Lake Store path (starting with '/') of the file on which to set or remove the expiration time.", :in "path", :name "filePath", :required true, :type "string"} {:description "Indicates the type of expiration to use for the file: 1. NeverExpire: ExpireTime is ignored. 2. RelativeToNow: ExpireTime is an integer in milliseconds representing the expiration date relative to when file expiration is updated. 3. RelativeToCreationDate: ExpireTime is an integer in milliseconds representing the expiration date relative to file creation. 4. Absolute: ExpireTime is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.", :enum ["NeverExpire" "RelativeToNow" "RelativeToCreationDate" "Absolute"], :in "query", :name "expiryOption", :required true, :type "string", :x-ms-enum {:modelAsString false, :name "ExpiryOptionType"}} {:description "The time that the file will expire, corresponding to the ExpiryOption that was set.", :format "int64", :in "query", :name "expireTime", :required false, :type "integer"} {:description "The constant value for the operation.", :enum ["SETEXPIRY"], :in "query", :name "op", :required true, :type "string"} #:reference{:parameters "ApiVersionParameter"}], :verb :put}, :FileSystem_CheckAccess {:path "/webhdfs/v1/{path}", :description "Checks if the specified access is available at the given path.", :parameters [{:description "The Data Lake Store path (starting with '/') of the file or directory for which to check access.", :in "path", :name "path", :required true, :type "string"} {:description "File system operation read/write/execute in string form, matching regex pattern '[rwx-]{3}'", :in "query", :name "fsaction", :required false, :type "string"} {:description "The constant value for the operation.", :enum ["CHECKACCESS"], :in "query", :name "op", :required true, :type "string"} #:reference{:parameters "ApiVersionParameter"}], :verb :get}, :FileSystem_Mkdirs {:path "/webhdfs/v1/{path}", :description "Creates a directory.", :parameters [{:description "The Data Lake Store path (starting with '/') of the directory to create.", :in "path", :name "path", :required true, :type "string"} {:description "The constant value for the operation.", :enum ["MKDIRS"], :in "query", :name "op", :required true, :type "string"} #:reference{:parameters "ApiVersionParameter"}], :verb :put}}, :parameters {:ApiVersionParameter {:description "Client Api Version.", :in "query", :name "api-version", :required true, :type "string"}, :adlsFilesystemDnsSuffixInPath {:default "azuredatalakestore.net", :description "Gets the URI used as the base for all cloud service requests.", :in "path", :name "adlsFileSystemDnsSuffix", :required true, :type "string", :x-ms-parameter-location "client", :x-ms-skip-url-encoding true}}, :definitions {:AdlsRemoteException {:description "Data Lake Store filesystem exception based on the WebHDFS definition for RemoteExceptions.", :discriminator "exception", :properties {:exception {:description "the class name of the exception thrown, such as 'IllegalArgumentException'.", :readOnly true, :type "string"}, :javaClassName {:description "the full class package name for the exception thrown, such as 'java.lang.IllegalArgumentException'.", :readOnly true, :type "string"}, :message {:description "the message associated with the exception that was thrown, such as 'Invalid value for webhdfs parameter \"permission\":...'.", :readOnly true, :type "string"}}, :required ["exception"]}, :FileStatusProperties {:description "Data Lake Store file or directory information.", :properties {:blockSize {:description "the block size for the file.", :format "int64", :readOnly true, :type "integer"}, :accessTime {:description "the last access time as ticks since the epoch.", :format "int64", :readOnly true, :type "integer"}, :group {:description "the group owner.", :readOnly true, :type "string"}, :permission {:description "the permission represented as an string.", :readOnly true, :type "string"}, :expirationTime {:description "Gets the expiration time, if any, as ticks since the epoch. If this is set to 0 or DateTime.MaxValue there is no expiration.", :format "int64", :readOnly true, :type "integer"}, :childrenNum {:description "the number of children in the directory.", :format "int64", :readOnly true, :type "integer"}, :modificationTime {:description "the modification time as ticks since the epoch.", :format "int64", :readOnly true, :type "integer"}, :type {:description "the type of the path object.", :enum ["FILE" "DIRECTORY"], :readOnly true, :type "string", :x-ms-enum {:modelAsString false, :name "FileType"}}, :length {:description "the number of bytes in a file.", :format "int64", :readOnly true, :type "integer"}, :pathSuffix {:description "the path suffix.", :readOnly true, :type "string"}, :owner {:description "the user who is the owner.", :readOnly true, :type "string"}}}, :FileStatusesResult {:description "Data Lake Store filesystem file status list information response.", :properties {:FileStatuses #:reference{:definitions "FileStatuses"}}}, :FileOperationResult {:description "The result of the request or operation.", :properties {:boolean {:description "the result of the operation or request.", :readOnly true, :type "boolean", :x-ms-client-name "operationResult"}}}, :AdlsSecurityException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating that access is denied. Thrown when a 401 error response code is returned (Unauthorized).", :x-ms-discriminator-value "SecurityException"}, :AdlsIOException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating there was an IO (read or write) error. Thrown when a 403 error response code is returned (forbidden).", :x-ms-discriminator-value "IOException"}, :AdlsBadOffsetException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating the append or read is from a bad offset. Thrown when a 400 error response code is returned for append and open operations (Bad request).", :x-ms-discriminator-value "BadOffsetException"}, :AdlsUnsupportedOperationException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating that the requested operation is not supported. Thrown when a 400 error response code is returned (bad request).", :x-ms-discriminator-value "UnsupportedOperationException"}, :AdlsIllegalArgumentException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating that one more arguments is incorrect. Thrown when a 400 error response code is returned (bad request).", :x-ms-discriminator-value "IllegalArgumentException"}, :AclStatus {:description "Data Lake Store file or directory Access Control List information.", :properties {:entries {:description "the list of ACLSpec entries on a file or directory.", :items {:type "string"}, :type "array"}, :group {:description "the group owner, an AAD Object ID.", :type "string"}, :owner {:description "the user owner, an AAD Object ID.", :type "string"}, :permission {:description "The octal representation of the unnamed user, mask and other permissions.", :format "int32", :type "integer"}, :stickyBit {:description "the indicator of whether the sticky bit is on or off.", :readOnly true, :type "boolean"}}}, :ContentSummaryResult {:description "Data Lake Store filesystem content summary information response.", :properties {:ContentSummary #:reference{:definitions "ContentSummary"}}}, :AdlsFileAlreadyExistsException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating the file or folder already exists. Thrown when a 403 error response code is returned (forbidden).", :x-ms-discriminator-value "FileAlreadyExistsException"}, :AdlsRuntimeException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown when an unexpected error occurs during an operation. Thrown when a 500 error response code is returned (Internal server error).", :x-ms-discriminator-value "RuntimeException"}, :FileStatuses {:description "Data Lake Store file status list information.", :properties {:FileStatus {:description "the object containing the list of properties of the files.", :items #:reference{:definitions "FileStatusProperties"}, :readOnly true, :type "array"}}}, :AclStatusResult {:description "Data Lake Store file or directory Access Control List information.", :properties {:AclStatus #:reference{:definitions "AclStatus"}}}, :FileStatusResult {:description "Data Lake Store filesystem file status information response.", :properties {:FileStatus #:reference{:definitions "FileStatusProperties"}}}, :AdlsFileNotFoundException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating the file or folder could not be found. Thrown when a 404 error response code is returned (not found).", :x-ms-discriminator-value "FileNotFoundException"}, :AdlsError {:description "Data Lake Store filesystem error containing a specific WebHDFS exception.", :properties {:RemoteException #:reference{:definitions "AdlsRemoteException"}}}, :AdlsAccessControlException {:allOf [#:reference{:definitions "AdlsRemoteException"}], :description "A WebHDFS exception thrown indicating that access is denied due to insufficient permissions. Thrown when a 403 error response code is returned (forbidden).", :x-ms-discriminator-value "AccessControlException"}, :ContentSummary {:description "Data Lake Store content summary information", :properties {:directoryCount {:description "the number of directories.", :format "int64", :readOnly true, :type "integer"}, :fileCount {:description "the number of files.", :format "int64", :readOnly true, :type "integer"}, :length {:description "the number of bytes used by the content.", :format "int64", :readOnly true, :type "integer"}, :spaceConsumed {:description "the disk space consumed by the content.", :format "int64", :readOnly true, :type "integer"}}}}}