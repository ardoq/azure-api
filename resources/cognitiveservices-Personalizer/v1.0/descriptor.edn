{:scheme "https", :host "azure.local", :info {:description "Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.", :title "Personalizer Client", :version "v1.0"}, :ops {:Model_GetProperties {:path "/model/properties", :description "Get properties of the model file generated by Personalizer service.", :parameters [], :verb :get}, :Evaluations_List {:path "/evaluations", :description "List all the submitted evaluations.", :parameters [], :verb :get}, :Log_Delete {:path "/logs", :description "Delete all generated logs.", :parameters [], :verb :delete}, :ServiceConfiguration_Get {:path "/configurations/service", :description "Get the Personalizer service configuration.", :parameters [], :verb :get}, :Policy_Reset {:path "/configurations/policy", :description "Resets the Learning settings of the Personalizer service to default.", :parameters [], :verb :delete}, :Model_Reset {:path "/model", :description "Resets the model file generated by Personalizer service.", :parameters [], :verb :delete}, :Log_GetProperties {:path "/logs/properties", :description "Get properties of generated logs.", :parameters [], :verb :get}, :Evaluations_Delete {:path "/evaluations/{evaluationId}", :description "Delete the evaluation associated with the Id.", :parameters [{:description "Id of the evaluation to delete.", :in "path", :maxLength 256, :name "evaluationId", :required true, :type "string"}], :verb :delete}, :Policy_Update {:path "/configurations/policy", :description "Update the Learning settings that the Personalizer service will use to train models.", :parameters [{:description "The Learning settings.", :in "body", :name "policy", :required true, :schema #:reference{:definitions "PolicyContract"}}], :verb :put}, :Evaluations_Get {:path "/evaluations/{evaluationId}", :description "Get the evaluation associated with the Id.", :parameters [{:description "Id of the evaluation.", :in "path", :maxLength 256, :name "evaluationId", :required true, :type "string"}], :verb :get}, :Events_Reward {:path "/events/{eventId}/reward", :description "Report reward that resulted from using the action specified in rewardActionId for the specified event.", :parameters [{:description "The event id this reward applies to.", :in "path", :maxLength 256, :name "eventId", :required true, :type "string"} {:description "The reward should be a floating point number, typically between 0 and 1.", :in "body", :name "reward", :required true, :schema #:reference{:definitions "RewardRequest"}}], :verb :post}, :Evaluations_Create {:path "/evaluations", :description "Submit a new evaluation job.", :parameters [{:description "The evaluation job definition.", :in "body", :name "evaluation", :required true, :schema #:reference{:definitions "EvaluationContract"}}], :verb :post}, :ServiceConfiguration_Update {:path "/configurations/service", :description "Update the Personalizer service configuration.", :parameters [{:description "The personalizer service configuration.", :in "body", :name "config", :required true, :schema #:reference{:definitions "ServiceConfiguration"}}], :verb :put}, :Rank {:path "/rank", :description "Submit a Personalizer rank request, to get which of the provided actions should be used in the provided context.", :parameters [{:description "A Personalizer request.", :in "body", :name "rankRequest", :required true, :schema #:reference{:definitions "RankRequest"}}], :verb :post}, :Policy_Get {:path "/configurations/policy", :description "Get the Learning settings currently used by the Personalizer service.", :parameters [], :verb :get}, :Model_Get {:path "/model", :description "Get the model file generated by Personalizer service.", :parameters [], :verb :get}, :Events_Activate {:path "/events/{eventId}/activate", :description "Report that the specified event was actually displayed to the user and a reward should be expected for it", :parameters [{:description "The event ID this activation applies to.", :in "path", :maxLength 256, :name "eventId", :required true, :type "string"}], :verb :post}}, :parameters {:Endpoint {:description "Supported Cognitive Services endpoint.", :in "path", :name "Endpoint", :required true, :type "string", :x-ms-parameter-location "client", :x-ms-skip-url-encoding true}}, :definitions {:RankedAction {:description "A ranked action with its resulting probability.", :properties {:id {:description "Id of the action", :maxLength 256, :readOnly true, :type "string"}, :probability {:description "Probability of the action", :format "float", :maximum 1, :minimum 0, :readOnly true, :type "number"}}, :type "object"}, :ModelProperties {:properties {:creationTime {:format "date-time", :readOnly true, :type "string"}, :lastModifiedTime {:format "date-time", :readOnly true, :type "string"}}, :type "object"}, :RewardRequest {:description "Reward given to a rank response.", :properties {:value {:description "Reward to be assigned to an action. Value should be between -1 and 1 inclusive.", :format "float", :type "number"}}, :required ["value"], :type "object"}, :RankRequest {:description "Request a set of actions to be ranked by the Personalizer service.", :properties {:actions {:description "The set of actions the Personalizer service can pick from.\r\nThe set should not contain more than 50 actions.\r\nThe order of the actions does not affect the rank result but the order\r\nshould match the sequence your application would have used to display them.\r\nThe first item in the array will be used as Baseline item in Offline evaluations.", :items #:reference{:definitions "RankableAction"}, :type "array"}, :contextFeatures {:description "Features of the context used for Personalizer as a\r\ndictionary of dictionaries. This depends on the application, and\r\ntypically includes features about the current user, their\r\ndevice, profile information, aggregated data about time and date, etc.\r\nFeatures should not include personally identifiable information (PII),\r\nunique UserIDs, or precise timestamps.", :items {:type "object"}, :type "array"}, :deferActivation {:default false, :description "Send false if it is certain the rewardActionId in rank results will be shown to the user, therefore\r\nPersonalizer will expect a Reward call, otherwise it will assign the default\r\nReward to the event. Send true if it is possible the user will not see the\r\naction specified in the rank results, because the page is rendering later, or the Rank results may be\r\noverridden by code further downstream.", :type "boolean"}, :eventId {:description "Optionally pass an eventId that uniquely identifies this Rank event.\r\nIf null, the service generates a unique eventId. The eventId will be used for\r\nassociating this request with its reward, as well as seeding the pseudo-random\r\ngenerator when making a Personalizer call.", :maxLength 256, :type "string"}, :excludedActions {:description "The set of action ids to exclude from ranking.", :items {:type "string"}, :type "array"}}, :required ["actions"], :type "object"}, :ServiceConfiguration {:description "The configuration of the service.", :properties {:defaultReward {:description "The reward given if a reward is not received within the specified wait time.", :format "float", :maximum 1, :minimum -1, :type "number"}, :explorationPercentage {:description "The percentage of rank responses that will use exploration.", :format "float", :maximum 1, :minimum 0, :type "number"}, :logMirrorEnabled {:description "Flag indicates whether log mirroring is enabled.", :type "boolean"}, :logMirrorSasUri {:description "Azure storage account container SAS URI for log mirroring.", :type "string"}, :logRetentionDays {:description "Number of days historical logs are to be maintained. -1 implies the logs will never be deleted.", :format "int32", :maximum 2147483647, :minimum -1, :type "integer"}, :modelExportFrequency {:description "Personalizer will start using the most updated trained model for online ranks automatically every specified time period.\r\nFor example, PT5M (5 mins). For information about the time format,\r\nsee http://en.wikipedia.org/wiki/ISO_8601#Durations", :format "duration", :type "string"}, :rewardAggregation {:description "The function used to process rewards, if multiple reward scores are received before rewardWaitTime is over.", :maxLength 256, :type "string"}, :rewardWaitTime {:description "The time span waited until a request is marked with the default reward.\r\nFor example, PT5M (5 mins). For information about the time format,\r\nsee http://en.wikipedia.org/wiki/ISO_8601#Durations", :format "duration", :type "string"}}, :required ["rewardWaitTime" "defaultReward" "rewardAggregation" "explorationPercentage" "modelExportFrequency" "logRetentionDays"], :type "object"}, :PolicyContract {:description "Learning settings specifying how to train the model.", :properties {:arguments {:description "Arguments of the Learning settings.", :maxLength 1024, :type "string"}, :name {:description "Name of the Learning settings.", :maxLength 256, :type "string"}}, :required ["name" "arguments"], :type "object"}, :PersonalizerError {:description "The error object.", :properties {:code {:description "High level error code.", :enum ["BadRequest" "ResourceNotFound" "InternalServerError" "InvalidServiceConfiguration" "InvalidPolicyConfiguration" "InvalidPolicyContract" "InvalidEvaluationContract" "InvalidRewardRequest" "InvalidEventIdToActivate" "InvalidRankRequest" "InvalidExportLogsRequest" "InvalidContainer" "FrontEndNotFound" "EvaluationNotFound" "LogsPropertiesNotFound" "RankNullResponse" "UpdateConfigurationFailed" "ModelResetFailed"], :type "string", :x-ms-enum {:modelAsString true, :name "PersonalizerErrorCode", :values [{:description "Request could not be understood by the server.", :value "BadRequest"} {:description "Requested resource does not exist on the server.", :value "ResourceNotFound"} {:description "A generic error has occurred on the server.", :value "InternalServerError"} {:description "Invalid service configuration.", :value "InvalidServiceConfiguration"} {:description "Invalid policy configuration.", :value "InvalidPolicyConfiguration"} {:description "Invalid policy contract.", :value "InvalidPolicyContract"} {:description "Invalid evaluation contract.", :value "InvalidEvaluationContract"} {:description "Invalid reward request.", :value "InvalidRewardRequest"} {:description "Invalid activate event request.", :value "InvalidEventIdToActivate"} {:description "Invalid rank request.", :value "InvalidRankRequest"} {:description "Invalid export logs request.", :value "InvalidExportLogsRequest"} {:description "SAS Uri must be the Uri to a container that has write permissions.", :value "InvalidContainer"} {:description "Front end not found.", :value "FrontEndNotFound"} {:description "Evaluation not found.", :value "EvaluationNotFound"} {:description "Logs properties not found.", :value "LogsPropertiesNotFound"} {:description "Rank call returned null response.", :value "RankNullResponse"} {:description "Failed to update configuration.", :value "UpdateConfigurationFailed"} {:description "Model reset failed.", :value "ModelResetFailed"}]}}, :details {:description "An array of details about specific errors that led to this reported error.", :items #:reference{:definitions "PersonalizerError"}, :type "array"}, :innerError #:reference{:definitions "InternalError"}, :message {:description "A message explaining the error reported by the service.", :type "string"}, :target {:description "Error source element.", :type "string"}}, :required ["code" "message"], :type "object"}, :PolicyResultSummary {:properties {:aggregateTimeWindow {:format "duration", :readOnly true, :type "string"}, :confidenceInterval {:format "float", :readOnly true, :type "number"}, :ipsEstimatorDenominator {:format "float", :readOnly true, :type "number"}, :ipsEstimatorNumerator {:format "float", :readOnly true, :type "number"}, :nonZeroProbability {:format "float", :type "number"}, :snipsEstimatorDenominator {:format "float", :readOnly true, :type "number"}, :sumOfSquares {:format "float", :readOnly true, :type "number"}, :timeStamp {:format "date-time", :readOnly true, :type "string"}}, :type "object"}, :RankResponse {:description "Returns which action to use as rewardActionId, and additional information about each action as a result of a Rank request.", :properties {:eventId {:description "The eventId for the round trip from request to response.", :maxLength 256, :readOnly true, :type "string"}, :ranking {:description "The calculated ranking for the current request.", :items #:reference{:definitions "RankedAction"}, :readOnly true, :type "array"}, :rewardActionId {:description "The action chosen by the Personalizer service. This is the action your application should display, and for which to report the reward. This might not be the\r\nfirst found in 'ranking' if an action in the request in first position was part of the excluded ids.", :maxLength 256, :readOnly true, :type "string"}}, :type "object"}, :LogsProperties {:properties {:dateRange {:allOf [#:reference{:definitions "DateRange"}], :readOnly true}}, :type "object"}, :EvaluationContract {:description "A counterfactual evaluation.", :properties {:enableOfflineExperimentation {:description "True if the evaluation should explore for a more optimal Learning settings.", :type "boolean"}, :endTime {:description "The end time of the evaluation.", :format "date-time", :type "string"}, :name {:description "The name of the evaluation.", :maxLength 256, :type "string"}, :policies {:description "Additional Learning settings to evaluate.", :items #:reference{:definitions "PolicyContract"}, :type "array"}, :startTime {:description "The start time of the evaluation.", :format "date-time", :type "string"}}, :required ["name" "startTime" "endTime" "policies"], :type "object"}, :RankableAction {:description "An action with it's associated features used for ranking.", :properties {:features {:description "List of dictionaries containing features.", :items {:type "object"}, :type "array"}, :id {:description "Id of the action.", :maxLength 256, :type "string"}}, :required ["id" "features"], :type "object"}, :DateRange {:properties {:from {:format "date-time", :readOnly true, :type "string"}, :to {:format "date-time", :readOnly true, :type "string"}}, :type "object"}, :ContainerStatus {:properties {:apiStatus {:type "string"}, :apiStatusMessage {:type "string"}, :service {:type "string"}}, :type "object"}, :InternalError {:description "An object containing more specific information than the parent object about the error.", :properties {:code {:description "Detailed error code.", :type "string"}, :innererror #:reference{:definitions "InternalError"}}, :type "object"}, :ErrorResponse {:description "Used to return an error to the client", :properties {:error #:reference{:definitions "PersonalizerError"}}, :required ["error"], :type "object"}, :PolicyResult {:properties {:arguments {:readOnly true, :type "string"}, :name {:readOnly true, :type "string"}, :summary {:items #:reference{:definitions "PolicyResultSummary"}, :readOnly true, :type "array"}, :totalSummary {:allOf [#:reference{:definitions "PolicyResultSummary"}], :readOnly true}}, :type "object"}, :Evaluation {:properties {:endTime {:format "date-time", :readOnly true, :type "string"}, :featureImportance {:items {:items {:type "string"}, :type "array"}, :type "array"}, :id {:maxLength 256, :readOnly true, :type "string"}, :jobId {:readOnly true, :type "string"}, :name {:maxLength 256, :readOnly true, :type "string"}, :policyResults {:items #:reference{:definitions "PolicyResult"}, :type "array"}, :startTime {:format "date-time", :readOnly true, :type "string"}, :status {:enum ["completed" "pending" "failed" "notSubmitted"], :readOnly true, :type "string", :x-ms-enum {:modelAsString true, :name "EvaluationJobStatus"}}}, :type "object"}}}