{:scheme "https", :host "management.azure.com", :info {:description "Provides create and read functionality for Import/Export operations on Azure SQL databases.", :title "Azure SQL Database Import/Export spec", :version "2014-04-01"}, :ops {:Databases_Export {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export", :description "Exports a database to a bacpac.", :parameters [{:description "The API version to use for the request.", :in "query", :name "api-version", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The subscription ID that identifies an Azure subscription.", :in "path", :name "subscriptionId", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.", :in "path", :name "resourceGroupName", :required true, :type "string", :x-ms-parameter-location "method"} #:reference{:parameters "ServerNameParameter"} {:description "The name of the database to be exported.", :in "path", :name "databaseName", :required true, :type "string"} {:description "The required parameters for exporting a database.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "ExportRequest"}}], :verb :post}, :Databases_CreateImportOperation {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}", :description "Creates an import operation that imports a bacpac into an existing database. The existing database must be empty.", :parameters [{:description "The API version to use for the request.", :in "query", :name "api-version", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The subscription ID that identifies an Azure subscription.", :in "path", :name "subscriptionId", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.", :in "path", :name "resourceGroupName", :required true, :type "string", :x-ms-parameter-location "method"} #:reference{:parameters "ServerNameParameter"} {:description "The name of the database to import into", :in "path", :name "databaseName", :required true, :type "string"} {:description "The name of the operation to perform", :enum ["import"], :in "path", :name "extensionName", :required true, :type "string", :x-ms-enum {:modelAsString true, :name "ExtensionName"}} {:description "The required parameters for importing a Bacpac into a database.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "ImportExtensionRequest"}}], :verb :put}, :Databases_Import {:path "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import", :description "Imports a bacpac into a new database. ", :parameters [{:description "The API version to use for the request.", :in "query", :name "api-version", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The subscription ID that identifies an Azure subscription.", :in "path", :name "subscriptionId", :required true, :type "string", :x-ms-parameter-location "client"} {:description "The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.", :in "path", :name "resourceGroupName", :required true, :type "string", :x-ms-parameter-location "method"} #:reference{:parameters "ServerNameParameter"} {:description "The required parameters for importing a Bacpac into a database.", :in "body", :name "parameters", :required true, :schema #:reference{:definitions "ImportRequest"}}], :verb :post}}, :parameters {:ServerNameParameter {:description "The name of the server.", :in "path", :name "serverName", :required true, :type "string", :x-ms-parameter-location "method"}}, :definitions {:ExportRequest {:description "Export database parameters.", :properties {:administratorLogin {:description "The name of the SQL administrator.", :type "string"}, :administratorLoginPassword {:description "The password of the SQL administrator.", :type "string"}, :authenticationType {:default "SQL", :description "The authentication type.", :enum ["SQL" "ADPassword"], :type "string", :x-ms-enum {:name "AuthenticationType"}}, :storageKey {:description "The storage key to use.  If storage key type is SharedAccessKey, it must be preceded with a \"?.\"", :type "string"}, :storageKeyType {:description "The type of the storage key to use.", :enum ["StorageAccessKey" "SharedAccessKey"], :type "string", :x-ms-enum {:name "StorageKeyType"}}, :storageUri {:description "The storage uri to use.", :type "string"}}, :required ["storageKeyType" "storageKey" "storageUri" "administratorLogin" "administratorLoginPassword"]}, :ImportExportResponse {:allOf [{:allOf [{:description "ARM resource.", :properties {:id {:description "Resource ID.", :readOnly true, :type "string"}, :name {:description "Resource name.", :readOnly true, :type "string"}, :type {:description "Resource type.", :readOnly true, :type "string"}}, :type "object", :x-ms-azure-resource true}], :description "ARM proxy resource.", :properties {}, :type "object"}], :description "Response for Import/Export Get operation.", :properties {:properties #:reference{:definitions "ImportExportResponseProperties"}}}, :ImportExportResponseProperties {:description "Response for Import/Export Status operation.", :properties {:errorMessage {:description "The error message returned from the server.", :readOnly true, :type "string"}, :blobUri {:description "The blob uri.", :readOnly true, :type "string"}, :serverName {:description "The name of the server.", :readOnly true, :type "string"}, :lastModifiedTime {:description "The operation status last modified time.", :readOnly true, :type "string"}, :requestId {:description "The request type of the operation.", :format "uuid", :readOnly true, :type "string"}, :status {:description "The status message returned from the server.", :readOnly true, :type "string"}, :databaseName {:description "The name of the database.", :readOnly true, :type "string"}, :requestType {:description "The request type of the operation.", :readOnly true, :type "string"}, :queuedTime {:description "The operation queued time.", :readOnly true, :type "string"}}}, :ImportExtensionProperties {:allOf [#:reference{:definitions "ExportRequest"}], :description "Represents the properties for an import operation", :properties {:operationMode {:description "The type of import operation being performed. This is always Import.", :enum ["Import"], :type "string", :x-ms-enum {:name "ImportOperationMode"}}}, :required ["operationMode"]}, :ImportExtensionRequest {:description "Import database parameters.", :properties {:name {:description "The name of the extension.", :type "string"}, :properties #:reference{:definitions "ImportExtensionProperties"}, :type {:description "The type of the extension.", :type "string"}}}, :ImportRequest {:allOf [#:reference{:definitions "ExportRequest"}], :description "Import database parameters.", :properties {:databaseName {:description "The name of the database to import.", :type "string"}, :edition {:description "The edition for the database being created.\r\n\r\nThe list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:\r\n\r\n```azurecli\r\naz sql db list-editions -l <location> -o table\r\n````\r\n\r\n```powershell\r\nGet-AzSqlServerServiceObjective -Location <location>\r\n````\r\n", :enum ["Web" "Business" "Basic" "Standard" "Premium" "PremiumRS" "Free" "Stretch" "DataWarehouse" "System" "System2" "GeneralPurpose" "BusinessCritical" "Hyperscale"], :type "string", :x-ms-enum {:modelAsString true, :name "DatabaseEdition"}}, :maxSizeBytes {:description "The maximum size for the newly imported database.", :type "string"}, :serviceObjectiveName {:description "The name of the service objective to assign to the database.", :enum ["System" "System0" "System1" "System2" "System3" "System4" "System2L" "System3L" "System4L" "Free" "Basic" "S0" "S1" "S2" "S3" "S4" "S6" "S7" "S9" "S12" "P1" "P2" "P3" "P4" "P6" "P11" "P15" "PRS1" "PRS2" "PRS4" "PRS6" "DW100" "DW200" "DW300" "DW400" "DW500" "DW600" "DW1000" "DW1200" "DW1000c" "DW1500" "DW1500c" "DW2000" "DW2000c" "DW3000" "DW2500c" "DW3000c" "DW6000" "DW5000c" "DW6000c" "DW7500c" "DW10000c" "DW15000c" "DW30000c" "DS100" "DS200" "DS300" "DS400" "DS500" "DS600" "DS1000" "DS1200" "DS1500" "DS2000" "ElasticPool"], :type "string", :x-ms-enum {:modelAsString true, :name "ServiceObjectiveName"}}}, :required ["databaseName" "edition" "serviceObjectiveName" "maxSizeBytes"]}}}